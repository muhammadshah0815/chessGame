{"ast":null,"code":"var _jsxFileName = \"/Users/shah/Desktop/chessGame/frontend/src/components/ChessBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './ChessBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialBoardSetup = [['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'], ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'], ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']];\nconst pieceImages = {\n  'P': '/images/pw.svg',\n  'R': '/images/rw.svg',\n  'N': '/images/nw.svg',\n  'B': '/images/bw.svg',\n  'Q': '/images/qw.svg',\n  'K': '/images/kw.svg',\n  'p': '/images/pb.svg',\n  'r': '/images/rb.svg',\n  'n': '/images/nb.svg',\n  'b': '/images/bb.svg',\n  'q': '/images/qb.svg',\n  'k': '/images/kb.svg'\n};\nconst ChessBoard = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoardSetup);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [turn, setTurn] = useState('white');\n  const [highlightedMoves, setHighlightedMoves] = useState([]);\n  const [enPassant, setEnPassant] = useState(null);\n  const [whiteTaken, setWhiteTaken] = useState([]);\n  const [blackTaken, setBlackTaken] = useState([]);\n  const [winner, setWinner] = useState(null);\n  const isValidMove = (piece, startRow, startCol, endRow, endCol, boardState) => {\n    const dx = Math.abs(endCol - startCol);\n    const dy = endRow - startRow;\n    if (boardState[endRow][endCol] && (piece.toUpperCase() === piece && boardState[endRow][endCol].toUpperCase() === boardState[endRow][endCol] || piece.toLowerCase() === piece && boardState[endRow][endCol].toLowerCase() === boardState[endRow][endCol])) {\n      return false;\n    }\n    switch (piece.toLowerCase()) {\n      case 'p':\n        if (piece === 'P' && endRow === 0) return true; // White pawn promotion\n        if (piece === 'p' && endRow === 7) return true; // Black pawn promotion\n        if (piece === 'P') {\n          return dy === -1 && dx === 0 && boardState[endRow][endCol] === '' || dy === -1 && dx === 1 && boardState[endRow][endCol] !== '';\n        } else {\n          return dy === 1 && dx === 0 && boardState[endRow][endCol] === '' || dy === 1 && dx === 1 && boardState[endRow][endCol] !== '';\n        }\n      case 'r':\n        return !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'n':\n        return dx * dy === 2;\n      case 'b':\n        return dx === dy && !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'q':\n        return (dx === 0 || dy === 0 || dx === dy) && !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'k':\n        return dx <= 1 && dy <= 1;\n      default:\n        return false;\n    }\n  };\n  const isPathBlocked = (startRow, startCol, endRow, endCol, boardState) => {\n    const dx = Math.sign(endCol - startCol);\n    const dy = Math.sign(endRow - startRow);\n    let x = startCol + dx;\n    let y = startRow + dy;\n    while (x !== endCol || y !== endRow) {\n      if (boardState[y][x] !== '') return true;\n      x += dx;\n      y += dy;\n    }\n    return false;\n  };\n  const handleSquareClick = (row, col) => {\n    if (selectedPiece && !winner) {\n      const {\n        piece,\n        startRow,\n        startCol\n      } = selectedPiece;\n      if (isValidMove(piece, startRow, startCol, row, col, board)) {\n        const newBoard = board.map(r => [...r]);\n        newBoard[startRow][startCol] = '';\n\n        // Pawn promotion\n        if (piece === 'P' && row === 0 || piece === 'p' && row === 7) {\n          newBoard[row][col] = piece === 'P' ? 'Q' : 'q';\n        } else {\n          newBoard[row][col] = piece;\n        }\n        setBoard(newBoard);\n        setTurn(turn === 'white' ? 'black' : 'white');\n\n        // Check if the move results in checkmate\n        if (isCheckmate(turn === 'white' ? 'black' : 'white', newBoard)) {\n          setWinner(turn);\n        }\n      }\n      setSelectedPiece(null);\n      setHighlightedMoves([]);\n    } else if (board[row][col] && (turn === 'white' && board[row][col].toUpperCase() === board[row][col] || turn === 'black' && board[row][col].toLowerCase() === board[row][col])) {\n      setSelectedPiece({\n        piece: board[row][col],\n        startRow: row,\n        startCol: col\n      });\n      setHighlightedMoves(getPossibleMoves(board[row][col], row, col));\n    }\n  };\n  const getPossibleMoves = (piece, startRow, startCol) => {\n    const moves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (isValidMove(piece, startRow, startCol, row, col, board)) {\n          moves.push({\n            row,\n            col\n          });\n        }\n      }\n    }\n    return moves;\n  };\n  const isCheckmate = (color, boardState) => {\n    // Implement checkmate checking logic here\n    return false; // Placeholder for demonstration\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [turn === 'white' ? 'White' : 'Black', \"'s Turn\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), winner && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [winner, \" wins by checkmate!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessboard\",\n      children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((piece, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'}`,\n          onClick: () => handleSquareClick(rowIndex, colIndex),\n          children: piece && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: pieceImages[piece],\n            alt: piece,\n            className: \"piece\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 27\n          }, this)\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"JKeeaZWdSdPJywz+Ef+8vJVM03w=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","initialBoardSetup","pieceImages","ChessBoard","_s","board","setBoard","selectedPiece","setSelectedPiece","turn","setTurn","highlightedMoves","setHighlightedMoves","enPassant","setEnPassant","whiteTaken","setWhiteTaken","blackTaken","setBlackTaken","winner","setWinner","isValidMove","piece","startRow","startCol","endRow","endCol","boardState","dx","Math","abs","dy","toUpperCase","toLowerCase","isPathBlocked","sign","x","y","handleSquareClick","row","col","newBoard","map","r","isCheckmate","getPossibleMoves","moves","push","color","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rowIndex","colIndex","onClick","src","alt","_c","$RefreshReg$"],"sources":["/Users/shah/Desktop/chessGame/frontend/src/components/ChessBoard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './ChessBoard.css';\n\nconst initialBoardSetup = [\n  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],\n  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\n  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']\n];\n\nconst pieceImages = {\n  'P': '/images/pw.svg', 'R': '/images/rw.svg', 'N': '/images/nw.svg', 'B': '/images/bw.svg', 'Q': '/images/qw.svg', 'K': '/images/kw.svg',\n  'p': '/images/pb.svg', 'r': '/images/rb.svg', 'n': '/images/nb.svg', 'b': '/images/bb.svg', 'q': '/images/qb.svg', 'k': '/images/kb.svg'\n};\n\nconst ChessBoard = () => {\n  const [board, setBoard] = useState(initialBoardSetup);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [turn, setTurn] = useState('white');\n  const [highlightedMoves, setHighlightedMoves] = useState([]);\n  const [enPassant, setEnPassant] = useState(null);\n  const [whiteTaken, setWhiteTaken] = useState([]);\n  const [blackTaken, setBlackTaken] = useState([]);\n  const [winner, setWinner] = useState(null);\n\n  const isValidMove = (piece, startRow, startCol, endRow, endCol, boardState) => {\n    const dx = Math.abs(endCol - startCol);\n    const dy = endRow - startRow;\n\n    if (boardState[endRow][endCol] && ((piece.toUpperCase() === piece && boardState[endRow][endCol].toUpperCase() === boardState[endRow][endCol]) || \n                                  (piece.toLowerCase() === piece && boardState[endRow][endCol].toLowerCase() === boardState[endRow][endCol]))) {\n      return false;\n    }\n\n    switch (piece.toLowerCase()) {\n      case 'p':\n        if (piece === 'P' && endRow === 0) return true; // White pawn promotion\n        if (piece === 'p' && endRow === 7) return true; // Black pawn promotion\n        if (piece === 'P') {\n          return (dy === -1 && dx === 0 && boardState[endRow][endCol] === '') ||\n                 (dy === -1 && dx === 1 && boardState[endRow][endCol] !== '');\n        } else {\n          return (dy === 1 && dx === 0 && boardState[endRow][endCol] === '') ||\n                 (dy === 1 && dx === 1 && boardState[endRow][endCol] !== '');\n        }\n      case 'r':\n        return !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'n':\n        return (dx * dy === 2);\n      case 'b':\n        return dx === dy && !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'q':\n        return (dx === 0 || dy === 0 || dx === dy) && !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'k':\n        return dx <= 1 && dy <= 1;\n      default:\n        return false;\n    }\n  };\n\n  const isPathBlocked = (startRow, startCol, endRow, endCol, boardState) => {\n    const dx = Math.sign(endCol - startCol);\n    const dy = Math.sign(endRow - startRow);\n    let x = startCol + dx;\n    let y = startRow + dy;\n\n    while (x !== endCol || y !== endRow) {\n      if (boardState[y][x] !== '') return true;\n      x += dx;\n      y += dy;\n    }\n\n    return false;\n  };\n\n  const handleSquareClick = (row, col) => {\n    if (selectedPiece && !winner) {\n      const { piece, startRow, startCol } = selectedPiece;\n      if (isValidMove(piece, startRow, startCol, row, col, board)) {\n        const newBoard = board.map(r => [...r]);\n        newBoard[startRow][startCol] = '';\n\n        // Pawn promotion\n        if ((piece === 'P' && row === 0) || (piece === 'p' && row === 7)) {\n          newBoard[row][col] = piece === 'P' ? 'Q' : 'q';\n        } else {\n          newBoard[row][col] = piece;\n        }\n\n        setBoard(newBoard);\n        setTurn(turn === 'white' ? 'black' : 'white');\n\n        // Check if the move results in checkmate\n        if (isCheckmate(turn === 'white' ? 'black' : 'white', newBoard)) {\n          setWinner(turn);\n        }\n      }\n      setSelectedPiece(null);\n      setHighlightedMoves([]);\n    } else if (board[row][col] && ((turn === 'white' && board[row][col].toUpperCase() === board[row][col]) || (turn === 'black' && board[row][col].toLowerCase() === board[row][col]))) {\n      setSelectedPiece({ piece: board[row][col], startRow: row, startCol: col });\n      setHighlightedMoves(getPossibleMoves(board[row][col], row, col));\n    }\n  };\n\n  const getPossibleMoves = (piece, startRow, startCol) => {\n    const moves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (isValidMove(piece, startRow, startCol, row, col, board)) {\n          moves.push({ row, col });\n        }\n      }\n    }\n    return moves;\n  };\n\n  const isCheckmate = (color, boardState) => {\n    // Implement checkmate checking logic here\n    return false; // Placeholder for demonstration\n  };\n\n  return (\n    <div className=\"game-container\">\n      <h2>{turn === 'white' ? 'White' : 'Black'}'s Turn</h2>\n      {winner && <h3>{winner} wins by checkmate!</h3>}\n      <div className=\"chessboard\">\n        {board.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"row\">\n            {row.map((piece, colIndex) => (\n              <div\n                key={colIndex}\n                className={`square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'}`}\n                onClick={() => handleSquareClick(rowIndex, colIndex)}\n              >\n                {piece && <img src={pieceImages[piece]} alt={piece} className=\"piece\" />}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ChessBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}