{"ast":null,"code":"var _jsxFileName = \"/Users/shah/Desktop/chessGame/frontend/src/components/ChessBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './ChessBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialBoardSetup = [['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'], ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'], ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']];\nconst pieceMap = {\n  'P': '♙',\n  'R': '♖',\n  'N': '♘',\n  'B': '♗',\n  'Q': '♕',\n  'K': '♔',\n  'p': '♟',\n  'r': '♜',\n  'n': '♞',\n  'b': '♝',\n  'q': '♛',\n  'k': '♚'\n};\nconst ChessBoard = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoardSetup);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [turn, setTurn] = useState('white'); // Track whose turn it is\n  const [highlightedMoves, setHighlightedMoves] = useState([]);\n  const isValidMove = (piece, startRow, startCol, endRow, endCol) => {\n    // Basic move validation for each piece\n    const dx = Math.abs(endCol - startCol);\n    const dy = endRow - startRow;\n    if (board[endRow][endCol] && (piece.toUpperCase() === piece && board[endRow][endCol].toUpperCase() === board[endRow][endCol] || piece.toLowerCase() === piece && board[endRow][endCol].toLowerCase() === board[endRow][endCol])) {\n      return false; // Cannot move to a square occupied by the same color piece\n    }\n    switch (piece.toLowerCase()) {\n      case 'p':\n        // Pawn\n        if (piece === 'P') {\n          // White pawn\n          if (startRow === 6 && endRow === 4 && dx === 0 && board[endRow][endCol] === '' && board[endRow + 1][endCol] === '') {\n            // First move two squares\n            return true;\n          }\n          return dy === -1 && dx === 0 && board[endRow][endCol] === '' ||\n          // Move forward\n          dy === -1 && dx === 1 && board[endRow][endCol] !== ''; // Capture\n        } else {\n          // Black pawn\n          if (startRow === 1 && endRow === 3 && dx === 0 && board[endRow][endCol] === '' && board[endRow - 1][endCol] === '') {\n            // First move two squares\n            return true;\n          }\n          return dy === 1 && dx === 0 && board[endRow][endCol] === '' ||\n          // Move forward\n          dy === 1 && dx === 1 && board[endRow][endCol] !== ''; // Capture\n        }\n      case 'r':\n        // Rook\n        return (dx === 0 || Math.abs(dy) === 0) && !isPathBlocked(startRow, startCol, endRow, endCol);\n      case 'n':\n        // Knight\n        return dx * Math.abs(dy) === 2;\n      case 'b':\n        // Bishop\n        return dx === Math.abs(dy) && !isPathBlocked(startRow, startCol, endRow, endCol);\n      case 'q':\n        // Queen\n        return (dx === 0 || Math.abs(dy) === 0 || dx === Math.abs(dy)) && !isPathBlocked(startRow, startCol, endRow, endCol);\n      case 'k':\n        // King\n        return dx <= 1 && Math.abs(dy) <= 1;\n      default:\n        return false;\n    }\n  };\n  const [enPassant, setEnPassant] = useState(null); // Track en passant opportunities\n\n  const isPathBlocked = (startRow, startCol, endRow, endCol) => {\n    const dx = endCol > startCol ? 1 : endCol < startCol ? -1 : 0;\n    const dy = endRow > startRow ? 1 : endRow < startRow ? -1 : 0;\n    let x = startCol + dx;\n    let y = startRow + dy;\n    while (x !== endCol || y !== endRow) {\n      if (board[y][x] !== '') return true;\n      x += dx;\n      y += dy;\n    }\n    return false;\n  };\n  const getPossibleMoves = (piece, startRow, startCol) => {\n    const moves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (isValidMove(piece, startRow, startCol, row, col)) {\n          moves.push({\n            row,\n            col\n          });\n        }\n      }\n    }\n    return moves;\n  };\n  const handleSquareClick = (row, col) => {\n    if (selectedPiece) {\n      const {\n        piece,\n        startRow,\n        startCol\n      } = selectedPiece;\n      if (isValidMove(piece, startRow, startCol, row, col)) {\n        const newBoard = board.map(r => r.slice());\n        newBoard[startRow][startCol] = '';\n        newBoard[row][col] = piece;\n        setBoard(newBoard);\n        setTurn(turn === 'white' ? 'black' : 'white'); // Change turn\n      }\n      setSelectedPiece(null);\n      setHighlightedMoves([]);\n    } else if (board[row][col] && (turn === 'white' && board[row][col].toUpperCase() === board[row][col] || turn === 'black' && board[row][col].toLowerCase() === board[row][col])) {\n      setSelectedPiece({\n        piece: board[row][col],\n        startRow: row,\n        startCol: col\n      });\n      setHighlightedMoves(getPossibleMoves(board[row][col], row, col));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [turn === 'white' ? 'White' : 'Black', \"'s Turn\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessboard\",\n      children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((piece, colIndex) => {\n          const isHighlighted = highlightedMoves.some(move => move.row === rowIndex && move.col === colIndex);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'} ${isHighlighted ? 'highlighted' : ''}`,\n            onClick: () => handleSquareClick(rowIndex, colIndex),\n            children: piece && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `piece ${piece.toUpperCase() === piece ? 'white-piece' : 'black-piece'}`,\n              children: pieceMap[piece]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 29\n            }, this)\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 17\n          }, this);\n        })\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"YXMbCqtn4G25UJTEAeLs5rdmqHc=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","initialBoardSetup","pieceMap","ChessBoard","_s","board","setBoard","selectedPiece","setSelectedPiece","turn","setTurn","highlightedMoves","setHighlightedMoves","isValidMove","piece","startRow","startCol","endRow","endCol","dx","Math","abs","dy","toUpperCase","toLowerCase","isPathBlocked","enPassant","setEnPassant","x","y","getPossibleMoves","moves","row","col","push","handleSquareClick","newBoard","map","r","slice","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rowIndex","colIndex","isHighlighted","some","move","onClick","_c","$RefreshReg$"],"sources":["/Users/shah/Desktop/chessGame/frontend/src/components/ChessBoard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './ChessBoard.css';\n\nconst initialBoardSetup = [\n  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],\n  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\n  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']\n];\n\nconst pieceMap = {\n  'P': '♙', 'R': '♖', 'N': '♘', 'B': '♗', 'Q': '♕', 'K': '♔',\n  'p': '♟', 'r': '♜', 'n': '♞', 'b': '♝', 'q': '♛', 'k': '♚'\n};\n\nconst ChessBoard = () => {\n  const [board, setBoard] = useState(initialBoardSetup);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [turn, setTurn] = useState('white'); // Track whose turn it is\n  const [highlightedMoves, setHighlightedMoves] = useState([]);\n\n  const isValidMove = (piece, startRow, startCol, endRow, endCol) => {\n    // Basic move validation for each piece\n    const dx = Math.abs(endCol - startCol);\n    const dy = endRow - startRow;\n  \n    if (board[endRow][endCol] && ((piece.toUpperCase() === piece && board[endRow][endCol].toUpperCase() === board[endRow][endCol]) || \n                                  (piece.toLowerCase() === piece && board[endRow][endCol].toLowerCase() === board[endRow][endCol]))) {\n      return false; // Cannot move to a square occupied by the same color piece\n    }\n  \n    switch (piece.toLowerCase()) {\n      case 'p': // Pawn\n        if (piece === 'P') { // White pawn\n          if (startRow === 6 && endRow === 4 && dx === 0 && board[endRow][endCol] === '' && board[endRow + 1][endCol] === '') { // First move two squares\n            return true;\n          }\n          return (dy === -1 && dx === 0 && board[endRow][endCol] === '') || // Move forward\n                 (dy === -1 && dx === 1 && board[endRow][endCol] !== ''); // Capture\n        } else { // Black pawn\n          if (startRow === 1 && endRow === 3 && dx === 0 && board[endRow][endCol] === '' && board[endRow - 1][endCol] === '') { // First move two squares\n            return true;\n          }\n          return (dy === 1 && dx === 0 && board[endRow][endCol] === '') || // Move forward\n                 (dy === 1 && dx === 1 && board[endRow][endCol] !== ''); // Capture\n        }\n      case 'r': // Rook\n        return (dx === 0 || Math.abs(dy) === 0) && !isPathBlocked(startRow, startCol, endRow, endCol);\n      case 'n': // Knight\n        return dx * Math.abs(dy) === 2;\n      case 'b': // Bishop\n        return dx === Math.abs(dy) && !isPathBlocked(startRow, startCol, endRow, endCol);\n      case 'q': // Queen\n        return (dx === 0 || Math.abs(dy) === 0 || dx === Math.abs(dy)) && !isPathBlocked(startRow, startCol, endRow, endCol);\n      case 'k': // King\n        return dx <= 1 && Math.abs(dy) <= 1;\n      default:\n        return false;\n    }\n  };\n  \n  const [enPassant, setEnPassant] = useState(null); // Track en passant opportunities\n\n\n  const isPathBlocked = (startRow, startCol, endRow, endCol) => {\n    const dx = endCol > startCol ? 1 : endCol < startCol ? -1 : 0;\n    const dy = endRow > startRow ? 1 : endRow < startRow ? -1 : 0;\n    let x = startCol + dx;\n    let y = startRow + dy;\n\n    while (x !== endCol || y !== endRow) {\n      if (board[y][x] !== '') return true;\n      x += dx;\n      y += dy;\n    }\n\n    return false;\n  };\n\n  const getPossibleMoves = (piece, startRow, startCol) => {\n    const moves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (isValidMove(piece, startRow, startCol, row, col)) {\n          moves.push({ row, col });\n        }\n      }\n    }\n    return moves;\n  };\n\n  const handleSquareClick = (row, col) => {\n    if (selectedPiece) {\n      const { piece, startRow, startCol } = selectedPiece;\n      if (isValidMove(piece, startRow, startCol, row, col)) {\n        const newBoard = board.map((r) => r.slice());\n        newBoard[startRow][startCol] = '';\n        newBoard[row][col] = piece;\n        setBoard(newBoard);\n        setTurn(turn === 'white' ? 'black' : 'white'); // Change turn\n      }\n      setSelectedPiece(null);\n      setHighlightedMoves([]);\n    } else if (board[row][col] && ((turn === 'white' && board[row][col].toUpperCase() === board[row][col]) || (turn === 'black' && board[row][col].toLowerCase() === board[row][col]))) {\n      setSelectedPiece({ piece: board[row][col], startRow: row, startCol: col });\n      setHighlightedMoves(getPossibleMoves(board[row][col], row, col));\n    }\n  };\n\n  return (\n    <div className=\"game-container\">\n      <h2>{turn === 'white' ? 'White' : 'Black'}'s Turn</h2>\n      <div className=\"chessboard\">\n        {board.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"row\">\n            {row.map((piece, colIndex) => {\n              const isHighlighted = highlightedMoves.some(move => move.row === rowIndex && move.col === colIndex);\n              return (\n                <div\n                  key={colIndex}\n                  className={`square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'} ${isHighlighted ? 'highlighted' : ''}`}\n                  onClick={() => handleSquareClick(rowIndex, colIndex)}\n                >\n                  {piece && <span className={`piece ${piece.toUpperCase() === piece ? 'white-piece' : 'black-piece'}`}>{pieceMap[piece]}</span>}\n                </div>\n              );\n            })}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ChessBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}