{"ast":null,"code":"var _jsxFileName = \"/Users/shah/Desktop/chessGame/frontend/src/components/ChessBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './ChessBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialBoardSetup = [['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'], ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'], ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']];\nconst pieceImages = {\n  'P': '/images/pw.svg',\n  'R': '/images/rw.svg',\n  'N': '/images/nw.svg',\n  'B': '/images/bw.svg',\n  'Q': '/images/qw.svg',\n  'K': '/images/kw.svg',\n  'p': '/images/pb.svg',\n  'r': '/images/rb.svg',\n  'n': '/images/nb.svg',\n  'b': '/images/bb.svg',\n  'q': '/images/qb.svg',\n  'k': '/images/kb.svg'\n};\nconst ChessBoard = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoardSetup);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [turn, setTurn] = useState('white');\n  const [highlightedMoves, setHighlightedMoves] = useState([]);\n  const [enPassant, setEnPassant] = useState(null);\n  const [whiteTaken, setWhiteTaken] = useState([]);\n  const [blackTaken, setBlackTaken] = useState([]);\n  const [winner, setWinner] = useState(null);\n  const [kingMoved, setKingMoved] = useState({\n    white: false,\n    black: false\n  });\n  const [rookMoved, setRookMoved] = useState({\n    white: {\n      queenside: false,\n      kingside: false\n    },\n    black: {\n      queenside: false,\n      kingside: false\n    }\n  });\n\n  // Helper function to check if the path is clear for castling\n  const isPathClear = (row, startCol, endCol) => {\n    const step = startCol < endCol ? 1 : -1;\n    for (let col = startCol + step; col !== endCol; col += step) {\n      if (board[row][col] !== '') return false;\n    }\n    return true;\n  };\n  const isValidMove = (piece, startRow, startCol, endRow, endCol, boardState) => {\n    const dx = Math.abs(endCol - startCol);\n    const dy = Math.abs(endRow - startRow);\n    const pieceType = piece.toLowerCase();\n\n    // Basic move validation for pieces based on their type\n    switch (pieceType) {\n      case 'p':\n        // Pawn\n        if (piece === 'P' && startRow > endRow) return false; // White pawn moves up\n        if (piece === 'p' && startRow < endRow) return false; // Black pawn moves down\n        if (dx === 0 && boardState[endRow][endCol] !== '') return false; // Move forward into empty square\n        if (dx === 1 && boardState[endRow][endCol] === '' && endRow !== enPassant.row && endCol !== enPassant.col) return false; // Diagonal capture\n        break;\n      case 'r':\n        // Rook\n        if (dx !== 0 && dy !== 0) return false; // Moves straight\n        break;\n      case 'n':\n        // Knight\n        if (dx * dy !== 2) return false; // L shape\n        break;\n      case 'b':\n        // Bishop\n        if (dx !== dy) return false; // Moves diagonal\n        break;\n      case 'q':\n        // Queen\n        if (dx !== 0 && dy !== 0 && dx !== dy) return false; // Moves straight or diagonal\n        break;\n      case 'k':\n        // King\n        if (dx > 1 || dy > 1) {\n          // Normal move\n          // Castling\n          if (dx === 2 && dy === 0 && !kingMoved[turn]) {\n            const kingside = endCol > startCol;\n            const rookCol = kingside ? 7 : 0;\n            const rookDest = kingside ? 5 : 3;\n            if (rookMoved[turn][kingside ? 'kingside' : 'queenside'] || !isPathClear(startRow, startCol, rookCol)) {\n              return false;\n            }\n            // Assume isCheck function is defined to check if the king is in check\n            if (isCheck(turn, startRow, startCol) || isCheck(turn, startRow, rookDest)) {\n              return false;\n            }\n            return true;\n          }\n          return false;\n        }\n        break;\n    }\n\n    // Check if path is blocked for sliding pieces (rook, bishop, queen)\n    if (['r', 'b', 'q'].includes(pieceType) && isPathBlocked(startRow, startCol, endRow, endCol, boardState)) {\n      return false;\n    }\n\n    // Check destination square is not occupied by a friendly piece\n    if (boardState[endRow][endCol] !== '' && (turn === 'white' && piece === piece.toUpperCase() || turn === 'black' && piece === piece.toLowerCase())) {\n      return false;\n    }\n    return true;\n  };\n  const isPathBlocked = (startRow, startCol, endRow, endCol, boardState) => {\n    const dx = endCol > startCol ? 1 : endCol < startCol ? -1 : 0;\n    const dy = endRow > startRow ? 1 : endRow < startRow ? -1 : 0;\n    let x = startCol + dx;\n    let y = startRow + dy;\n    while (x !== endCol || y !== endRow) {\n      if (boardState[y][x] !== '') return true;\n      x += dx;\n      y += dy;\n    }\n    return false;\n  };\n  const findKing = (tempBoard, king) => {\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoard[row][col] === king) {\n          return {\n            row,\n            col\n          };\n        }\n      }\n    }\n    return null;\n  };\n  const getPossibleMoves = (piece, startRow, startCol) => {\n    const moves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (isValidMove(piece, startRow, startCol, row, col, board) && !moveResultsInCheck(startRow, startCol, row, col)) {\n          moves.push({\n            row,\n            col\n          });\n        }\n      }\n    }\n    return moves;\n  };\n  const moveResultsInCheck = (startRow, startCol, endRow, endCol) => {\n    const tempBoard = board.map(r => r.slice());\n    const piece = tempBoard[startRow][startCol];\n    tempBoard[startRow][startCol] = '';\n    tempBoard[endRow][endCol] = piece;\n    const kingPosition = findKing(tempBoard, turn === 'white' ? 'K' : 'k');\n    if (!kingPosition) {\n      return false; // If no king is found, cannot be in check (error case, handled by findKing)\n    }\n    return isSquareAttacked(tempBoard, kingPosition.row, kingPosition.col, turn === 'white' ? 'black' : 'white');\n  };\n  const isSquareAttacked = (tempBoard, row, col, attackerColor) => {\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const piece = tempBoard[r][c];\n        if (piece && (attackerColor === 'white' && piece.toUpperCase() === piece || attackerColor === 'black' && piece.toLowerCase() === piece)) {\n          if (isValidMove(piece, r, c, row, col, tempBoard)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n  const handleSquareClick = (row, col) => {\n    if (selectedPiece && !winner) {\n      const {\n        piece,\n        startRow,\n        startCol\n      } = selectedPiece;\n      if (isValidMove(piece, startRow, startCol, row, col, board) && !moveResultsInCheck(startRow, startCol, row, col)) {\n        const newBoard = board.map(r => r.slice());\n        newBoard[startRow][startCol] = '';\n\n        // Track taken pieces\n        if (board[row][col]) {\n          if (turn === 'white') {\n            setBlackTaken([...blackTaken, board[row][col]]);\n          } else {\n            setWhiteTaken([...whiteTaken, board[row][col]]);\n          }\n        }\n\n        // Auto-queen for pawns\n        if (piece === 'P' && row === 0) {\n          newBoard[row][col] = 'Q'; // Auto-queen for white pawn\n        } else if (piece === 'p' && row === 7) {\n          newBoard[row][col] = 'q'; // Auto-queen for black pawn\n        } else {\n          newBoard[row][col] = piece;\n        }\n\n        // Handle en passant capture\n        if (piece.toLowerCase() === 'p' && enPassant && enPassant.row === row && enPassant.col === col) {\n          newBoard[startRow][col] = '';\n          if (turn === 'white') {\n            setBlackTaken([...blackTaken, 'p']);\n          } else {\n            setWhiteTaken([...whiteTaken, 'P']);\n          }\n        }\n\n        // Set en passant opportunities\n        if (piece.toLowerCase() === 'p' && Math.abs(startRow - row) === 2) {\n          setEnPassant({\n            row: (startRow + row) / 2,\n            col\n          });\n        } else {\n          setEnPassant(null);\n        }\n\n        // Handle castling\n        if (piece.toLowerCase() === 'k' && Math.abs(startCol - col) === 2) {\n          const kingside = col > startCol;\n          const rookStartCol = kingside ? 7 : 0;\n          const rookEndCol = kingside ? 5 : 3;\n          newBoard[startRow][rookEndCol] = newBoard[startRow][rookStartCol];\n          newBoard[startRow][rookStartCol] = '';\n          setRookMoved({\n            ...rookMoved,\n            [turn]: {\n              ...rookMoved[turn],\n              [kingside ? 'kingside' : 'queenside']: true\n            }\n          });\n        }\n        setBoard(newBoard);\n        setKingMoved({\n          ...kingMoved,\n          [turn]: true\n        });\n\n        // Check if the move results in checkmate\n        const opponent = turn === 'white' ? 'black' : 'white';\n        if (isCheckmate(opponent, newBoard)) {\n          setWinner(turn);\n        } else {\n          setTurn(turn === 'white' ? 'black' : 'white'); // Change turn\n        }\n      }\n      setSelectedPiece(null);\n      setHighlightedMoves([]);\n    } else if (board[row][col] && (turn === 'white' && board[row][col].toUpperCase() === board[row][col] || turn === 'black' && board[row][col].toLowerCase() === board[row][col])) {\n      setSelectedPiece({\n        piece: board[row][col],\n        startRow: row,\n        startCol: col\n      });\n      setHighlightedMoves(getPossibleMoves(board[row][col], row, col));\n    }\n  };\n  const handleDragStart = (e, piece, row, col) => {\n    if (turn === 'white' && piece.toUpperCase() === piece || turn === 'black' && piece.toLowerCase() === piece) {\n      setSelectedPiece({\n        piece,\n        startRow: row,\n        startCol: col\n      });\n      setHighlightedMoves(getPossibleMoves(piece, row, col));\n      e.dataTransfer.setDragImage(new Image(), 0, 0); // Disable default drag image\n    } else {\n      e.preventDefault(); // Prevent drag if it's not the player's turn\n    }\n  };\n  const handleDragOver = (e, row, col) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = \"move\"; // Change cursor to move icon\n  };\n  const handleDrop = (e, row, col) => {\n    e.preventDefault();\n    handleSquareClick(row, col);\n  };\n  const isCheckmate = (color, boardState) => {\n    const kingPosition = findKing(boardState, color === 'white' ? 'K' : 'k');\n    if (!kingPosition) return false;\n    const moves = getAllPossibleMoves(color, boardState);\n    return moves.length === 0 && isSquareAttacked(boardState, kingPosition.row, kingPosition.col, color === 'white' ? 'black' : 'white');\n  };\n  const getAllPossibleMoves = (color, boardState) => {\n    const moves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = boardState[row][col];\n        if (piece && (color === 'white' && piece.toUpperCase() === piece || color === 'black' && piece.toLowerCase() === piece)) {\n          moves.push(...getPossibleMoves(piece, row, col, boardState));\n        }\n      }\n    }\n    return moves;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [turn === 'white' ? 'White' : 'Black', \"'s Turn\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), winner && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [winner, \" wins by checkmate!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"taken-pieces\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"white-taken\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"White's Taken Pieces\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: whiteTaken.map((piece, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: pieceImages[piece],\n              alt: piece,\n              className: \"small-piece\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 68\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 50\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"black-taken\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Black's Taken Pieces\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: blackTaken.map((piece, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: pieceImages[piece],\n              alt: piece,\n              className: \"small-piece\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 68\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 50\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessboard\",\n      children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((piece, colIndex) => {\n          const isHighlighted = highlightedMoves.some(move => move.row === rowIndex && move.col === colIndex);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'} ${isHighlighted ? 'highlighted' : ''}`,\n            onClick: () => handleSquareClick(rowIndex, colIndex),\n            onDragOver: e => handleDragOver(e, rowIndex, colIndex),\n            onDrop: e => handleDrop(e, rowIndex, colIndex),\n            children: piece && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: pieceImages[piece],\n              alt: piece,\n              className: `piece ${selectedPiece && selectedPiece.startRow === rowIndex && selectedPiece.startCol === colIndex ? 'dragging' : ''}`,\n              draggable: true,\n              onDragStart: e => handleDragStart(e, piece, rowIndex, colIndex)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 29\n            }, this)\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 17\n          }, this);\n        })\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 292,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"48b+71ZG+JXsVqbvFa7fmDb4g18=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","initialBoardSetup","pieceImages","ChessBoard","_s","board","setBoard","selectedPiece","setSelectedPiece","turn","setTurn","highlightedMoves","setHighlightedMoves","enPassant","setEnPassant","whiteTaken","setWhiteTaken","blackTaken","setBlackTaken","winner","setWinner","kingMoved","setKingMoved","white","black","rookMoved","setRookMoved","queenside","kingside","isPathClear","row","startCol","endCol","step","col","isValidMove","piece","startRow","endRow","boardState","dx","Math","abs","dy","pieceType","toLowerCase","rookCol","rookDest","isCheck","includes","isPathBlocked","toUpperCase","x","y","findKing","tempBoard","king","getPossibleMoves","moves","moveResultsInCheck","push","map","r","slice","kingPosition","isSquareAttacked","attackerColor","c","handleSquareClick","newBoard","rookStartCol","rookEndCol","opponent","isCheckmate","handleDragStart","e","dataTransfer","setDragImage","Image","preventDefault","handleDragOver","dropEffect","handleDrop","color","getAllPossibleMoves","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","src","alt","rowIndex","colIndex","isHighlighted","some","move","onClick","onDragOver","onDrop","draggable","onDragStart","_c","$RefreshReg$"],"sources":["/Users/shah/Desktop/chessGame/frontend/src/components/ChessBoard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './ChessBoard.css';\n\nconst initialBoardSetup = [\n  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],\n  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\n  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']\n];\n\nconst pieceImages = {\n  'P': '/images/pw.svg', 'R': '/images/rw.svg', 'N': '/images/nw.svg', 'B': '/images/bw.svg', 'Q': '/images/qw.svg', 'K': '/images/kw.svg',\n  'p': '/images/pb.svg', 'r': '/images/rb.svg', 'n': '/images/nb.svg', 'b': '/images/bb.svg', 'q': '/images/qb.svg', 'k': '/images/kb.svg'\n};\n\nconst ChessBoard = () => {\n  const [board, setBoard] = useState(initialBoardSetup);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [turn, setTurn] = useState('white');\n  const [highlightedMoves, setHighlightedMoves] = useState([]);\n  const [enPassant, setEnPassant] = useState(null);\n  const [whiteTaken, setWhiteTaken] = useState([]);\n  const [blackTaken, setBlackTaken] = useState([]);\n  const [winner, setWinner] = useState(null);\n  const [kingMoved, setKingMoved] = useState({ white: false, black: false });\n  const [rookMoved, setRookMoved] = useState({\n    white: { queenside: false, kingside: false },\n    black: { queenside: false, kingside: false }\n  });\n\n  // Helper function to check if the path is clear for castling\n  const isPathClear = (row, startCol, endCol) => {\n    const step = startCol < endCol ? 1 : -1;\n    for (let col = startCol + step; col !== endCol; col += step) {\n      if (board[row][col] !== '') return false;\n    }\n    return true;\n  };\n\n  const isValidMove = (piece, startRow, startCol, endRow, endCol, boardState) => {\n    const dx = Math.abs(endCol - startCol);\n    const dy = Math.abs(endRow - startRow);\n    const pieceType = piece.toLowerCase();\n\n    // Basic move validation for pieces based on their type\n    switch (pieceType) {\n        case 'p': // Pawn\n            if (piece === 'P' && startRow > endRow) return false; // White pawn moves up\n            if (piece === 'p' && startRow < endRow) return false; // Black pawn moves down\n            if (dx === 0 && boardState[endRow][endCol] !== '') return false; // Move forward into empty square\n            if (dx === 1 && boardState[endRow][endCol] === '' && endRow !== enPassant.row && endCol !== enPassant.col) return false; // Diagonal capture\n            break;\n        case 'r': // Rook\n            if (dx !== 0 && dy !== 0) return false; // Moves straight\n            break;\n        case 'n': // Knight\n            if (dx * dy !== 2) return false; // L shape\n            break;\n        case 'b': // Bishop\n            if (dx !== dy) return false; // Moves diagonal\n            break;\n        case 'q': // Queen\n            if (dx !== 0 && dy !== 0 && dx !== dy) return false; // Moves straight or diagonal\n            break;\n        case 'k': // King\n            if (dx > 1 || dy > 1) { // Normal move\n                // Castling\n                if (dx === 2 && dy === 0 && !kingMoved[turn]) {\n                    const kingside = endCol > startCol;\n                    const rookCol = kingside ? 7 : 0;\n                    const rookDest = kingside ? 5 : 3;\n                    if (rookMoved[turn][kingside ? 'kingside' : 'queenside'] || !isPathClear(startRow, startCol, rookCol)) {\n                        return false;\n                    }\n                    // Assume isCheck function is defined to check if the king is in check\n                    if (isCheck(turn, startRow, startCol) || isCheck(turn, startRow, rookDest)) {\n                        return false;\n                    }\n                    return true;\n                }\n                return false;\n            }\n            break;\n    }\n\n    // Check if path is blocked for sliding pieces (rook, bishop, queen)\n    if (['r', 'b', 'q'].includes(pieceType) && isPathBlocked(startRow, startCol, endRow, endCol, boardState)) {\n        return false;\n    }\n\n    // Check destination square is not occupied by a friendly piece\n    if (boardState[endRow][endCol] !== '' &&\n        ((turn === 'white' && piece === piece.toUpperCase()) || \n         (turn === 'black' && piece === piece.toLowerCase()))) {\n        return false;\n    }\n\n    return true;\n};\n\n\n  const isPathBlocked = (startRow, startCol, endRow, endCol, boardState) => {\n    const dx = endCol > startCol ? 1 : endCol < startCol ? -1 : 0;\n    const dy = endRow > startRow ? 1 : endRow < startRow ? -1 : 0;\n    let x = startCol + dx;\n    let y = startRow + dy;\n\n    while (x !== endCol || y !== endRow) {\n      if (boardState[y][x] !== '') return true;\n      x += dx;\n      y += dy;\n    }\n\n    return false;\n  };\n\n  const findKing = (tempBoard, king) => {\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoard[row][col] === king) {\n          return { row, col };\n        }\n      }\n    }\n    return null;\n  };\n  \n\n  const getPossibleMoves = (piece, startRow, startCol) => {\n    const moves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (isValidMove(piece, startRow, startCol, row, col, board) && !moveResultsInCheck(startRow, startCol, row, col)) {\n          moves.push({ row, col });\n        }\n      }\n    }\n    return moves;\n  };\n\n  const moveResultsInCheck = (startRow, startCol, endRow, endCol) => {\n    const tempBoard = board.map((r) => r.slice());\n    const piece = tempBoard[startRow][startCol];\n    tempBoard[startRow][startCol] = '';\n    tempBoard[endRow][endCol] = piece;\n  \n    const kingPosition = findKing(tempBoard, turn === 'white' ? 'K' : 'k');\n    if (!kingPosition) {\n      return false; // If no king is found, cannot be in check (error case, handled by findKing)\n    }\n    return isSquareAttacked(tempBoard, kingPosition.row, kingPosition.col, turn === 'white' ? 'black' : 'white');\n  };\n  \n\n  const isSquareAttacked = (tempBoard, row, col, attackerColor) => {\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const piece = tempBoard[r][c];\n        if (piece && ((attackerColor === 'white' && piece.toUpperCase() === piece) || (attackerColor === 'black' && piece.toLowerCase() === piece))) {\n          if (isValidMove(piece, r, c, row, col, tempBoard)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const handleSquareClick = (row, col) => {\n    if (selectedPiece && !winner) {\n      const { piece, startRow, startCol } = selectedPiece;\n      if (isValidMove(piece, startRow, startCol, row, col, board) && !moveResultsInCheck(startRow, startCol, row, col)) {\n        const newBoard = board.map((r) => r.slice());\n        newBoard[startRow][startCol] = '';\n\n        // Track taken pieces\n        if (board[row][col]) {\n          if (turn === 'white') {\n            setBlackTaken([...blackTaken, board[row][col]]);\n          } else {\n            setWhiteTaken([...whiteTaken, board[row][col]]);\n          }\n        }\n\n        // Auto-queen for pawns\n        if (piece === 'P' && row === 0) {\n          newBoard[row][col] = 'Q'; // Auto-queen for white pawn\n        } else if (piece === 'p' && row === 7) {\n          newBoard[row][col] = 'q'; // Auto-queen for black pawn\n        } else {\n          newBoard[row][col] = piece;\n        }\n\n        // Handle en passant capture\n        if (piece.toLowerCase() === 'p' && enPassant && enPassant.row === row && enPassant.col === col) {\n          newBoard[startRow][col] = '';\n          if (turn === 'white') {\n            setBlackTaken([...blackTaken, 'p']);\n          } else {\n            setWhiteTaken([...whiteTaken, 'P']);\n          }\n        }\n\n        // Set en passant opportunities\n        if (piece.toLowerCase() === 'p' && Math.abs(startRow - row) === 2) {\n          setEnPassant({ row: (startRow + row) / 2, col });\n        } else {\n          setEnPassant(null);\n        }\n\n        // Handle castling\n        if (piece.toLowerCase() === 'k' && Math.abs(startCol - col) === 2) {\n          const kingside = col > startCol;\n          const rookStartCol = kingside ? 7 : 0;\n          const rookEndCol = kingside ? 5 : 3;\n          newBoard[startRow][rookEndCol] = newBoard[startRow][rookStartCol];\n          newBoard[startRow][rookStartCol] = '';\n          setRookMoved({\n            ...rookMoved,\n            [turn]: {\n              ...rookMoved[turn],\n              [kingside ? 'kingside' : 'queenside']: true\n            }\n          });\n        }\n\n        setBoard(newBoard);\n        setKingMoved({ ...kingMoved, [turn]: true });\n\n        // Check if the move results in checkmate\n        const opponent = turn === 'white' ? 'black' : 'white';\n        if (isCheckmate(opponent, newBoard)) {\n          setWinner(turn);\n        } else {\n          setTurn(turn === 'white' ? 'black' : 'white'); // Change turn\n        }\n      }\n      setSelectedPiece(null);\n      setHighlightedMoves([]);\n    } else if (board[row][col] && ((turn === 'white' && board[row][col].toUpperCase() === board[row][col]) || (turn === 'black' && board[row][col].toLowerCase() === board[row][col]))) {\n      setSelectedPiece({ piece: board[row][col], startRow: row, startCol: col });\n      setHighlightedMoves(getPossibleMoves(board[row][col], row, col));\n    }\n  };\n\n  const handleDragStart = (e, piece, row, col) => {\n    if ((turn === 'white' && piece.toUpperCase() === piece) || (turn === 'black' && piece.toLowerCase() === piece)) {\n      setSelectedPiece({ piece, startRow: row, startCol: col });\n      setHighlightedMoves(getPossibleMoves(piece, row, col));\n      e.dataTransfer.setDragImage(new Image(), 0, 0); // Disable default drag image\n    } else {\n      e.preventDefault(); // Prevent drag if it's not the player's turn\n    }\n  };\n\n  const handleDragOver = (e, row, col) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = \"move\"; // Change cursor to move icon\n  };\n\n  const handleDrop = (e, row, col) => {\n    e.preventDefault();\n    handleSquareClick(row, col);\n  };\n\n  const isCheckmate = (color, boardState) => {\n    const kingPosition = findKing(boardState, color === 'white' ? 'K' : 'k');\n    if (!kingPosition) return false;\n\n    const moves = getAllPossibleMoves(color, boardState);\n    return moves.length === 0 && isSquareAttacked(boardState, kingPosition.row, kingPosition.col, color === 'white' ? 'black' : 'white');\n  };\n\n  const getAllPossibleMoves = (color, boardState) => {\n    const moves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = boardState[row][col];\n        if (piece && ((color === 'white' && piece.toUpperCase() === piece) || (color === 'black' && piece.toLowerCase() === piece))) {\n          moves.push(...getPossibleMoves(piece, row, col, boardState));\n        }\n      }\n    }\n    return moves;\n  };\n\n  return (\n    <div className=\"game-container\">\n      <h2>{turn === 'white' ? 'White' : 'Black'}'s Turn</h2>\n      {winner && <h3>{winner} wins by checkmate!</h3>}\n      <div className=\"taken-pieces\">\n        <div className=\"white-taken\">\n          <h3>White's Taken Pieces</h3>\n          <div>{whiteTaken.map((piece, index) => <span key={index}><img src={pieceImages[piece]} alt={piece} className=\"small-piece\" /></span>)}</div>\n        </div>\n        <div className=\"black-taken\">\n          <h3>Black's Taken Pieces</h3>\n          <div>{blackTaken.map((piece, index) => <span key={index}><img src={pieceImages[piece]} alt={piece} className=\"small-piece\" /></span>)}</div>\n        </div>\n      </div>\n      <div className=\"chessboard\">\n        {board.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"row\">\n            {row.map((piece, colIndex) => {\n              const isHighlighted = highlightedMoves.some(move => move.row === rowIndex && move.col === colIndex);\n              return (\n                <div\n                  key={colIndex}\n                  className={`square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'} ${isHighlighted ? 'highlighted' : ''}`}\n                  onClick={() => handleSquareClick(rowIndex, colIndex)}\n                  onDragOver={(e) => handleDragOver(e, rowIndex, colIndex)}\n                  onDrop={(e) => handleDrop(e, rowIndex, colIndex)}\n                >\n                  {piece && <img\n                    src={pieceImages[piece]}\n                    alt={piece}\n                    className={`piece ${selectedPiece && selectedPiece.startRow === rowIndex && selectedPiece.startCol === colIndex ? 'dragging' : ''}`}\n                    draggable\n                    onDragStart={(e) => handleDragStart(e, piece, rowIndex, colIndex)}\n                  />}\n                </div>\n              );\n            })}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ChessBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}