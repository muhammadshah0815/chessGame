{"ast":null,"code":"var _jsxFileName = \"/Users/shah/Desktop/chessGame/frontend/src/components/ChessBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport './ChessBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialBoardSetup = [['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'], ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'], ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']];\nconst pieceImages = {\n  'P': '/images/pw.svg',\n  'R': '/images/rw.svg',\n  'N': '/images/nw.svg',\n  'B': '/images/bw.svg',\n  'Q': '/images/qw.svg',\n  'K': '/images/kw.svg',\n  'p': '/images/pb.svg',\n  'r': '/images/rb.svg',\n  'n': '/images/nb.svg',\n  'b': '/images/bb.svg',\n  'q': '/images/qb.svg',\n  'k': '/images/kb.svg'\n};\nconst ChessBoard = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoardSetup);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [turn, setTurn] = useState('white');\n  const [highlightedMoves, setHighlightedMoves] = useState([]);\n  const [enPassant, setEnPassant] = useState(null);\n  const [whiteTaken, setWhiteTaken] = useState([]);\n  const [blackTaken, setBlackTaken] = useState([]);\n  const [winner, setWinner] = useState(null);\n  const dragImageRef = useRef(null);\n  const isValidMove = (piece, startRow, startCol, endRow, endCol, boardState) => {\n    const dx = Math.abs(endCol - startCol);\n    const dy = endRow - startRow;\n    if (boardState[endRow][endCol] && (piece.toUpperCase() === piece && boardState[endRow][endCol].toUpperCase() === boardState[endRow][endCol] || piece.toLowerCase() === piece && boardState[endRow][endCol].toLowerCase() === boardState[endRow][endCol])) {\n      return false;\n    }\n    switch (piece.toLowerCase()) {\n      case 'p':\n        if (piece === 'P') {\n          if (startRow === 6 && endRow === 4 && dx === 0 && boardState[endRow][endCol] === '' && boardState[endRow + 1][endCol] === '') {\n            return true;\n          }\n          if (startRow === 3 && endRow === 2 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] === '' && enPassant && enPassant.row === endRow && enPassant.col === endCol) {\n            return true;\n          }\n          return dy === -1 && dx === 0 && boardState[endRow][endCol] === '' || dy === -1 && dx === 1 && boardState[endRow][endCol] !== '';\n        } else {\n          if (startRow === 1 && endRow === 3 && dx === 0 && boardState[endRow][endCol] === '' && boardState[endRow - 1][endCol] === '') {\n            return true;\n          }\n          if (startRow === 4 && endRow === 5 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] === '' && enPassant && enPassant.row === endRow && enPassant.col === endCol) {\n            return true;\n          }\n          return dy === 1 && dx === 0 && boardState[endRow][endCol] === '' || dy === 1 && dx === 1 && boardState[endRow][endCol] !== '';\n        }\n      case 'r':\n        return (dx === 0 || Math.abs(dy) === 0) && !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'n':\n        return dx * Math.abs(dy) === 2;\n      case 'b':\n        return dx === Math.abs(dy) && !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'q':\n        return (dx === 0 || Math.abs(dy) === 0 || dx === Math.abs(dy)) && !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'k':\n        return dx <= 1 && Math.abs(dy) <= 1;\n      default:\n        return false;\n    }\n  };\n  const isPathBlocked = (startRow, startCol, endRow, endCol, boardState) => {\n    const dx = endCol > startCol ? 1 : endCol < startCol ? -1 : 0;\n    const dy = endRow > startRow ? 1 : endRow < startRow ? -1 : 0;\n    let x = startCol + dx;\n    let y = startRow + dy;\n    while (x !== endCol || y !== endRow) {\n      if (boardState[y][x] !== '') return true;\n      x += dx;\n      y += dy;\n    }\n    return false;\n  };\n  const getPossibleMoves = (piece, startRow, startCol) => {\n    const moves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (isValidMove(piece, startRow, startCol, row, col, board) && !moveResultsInCheck(startRow, startCol, row, col)) {\n          moves.push({\n            row,\n            col\n          });\n        }\n      }\n    }\n    return moves;\n  };\n  const moveResultsInCheck = (startRow, startCol, endRow, endCol) => {\n    const tempBoard = board.map(r => r.slice());\n    const piece = tempBoard[startRow][startCol];\n    tempBoard[startRow][startCol] = '';\n    tempBoard[endRow][endCol] = piece;\n    const kingPosition = findKing(tempBoard, turn === 'white' ? 'K' : 'k');\n    return isSquareAttacked(tempBoard, kingPosition.row, kingPosition.col, turn === 'white' ? 'black' : 'white');\n  };\n  const findKing = (tempBoard, king) => {\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoard[row][col] === king) {\n          return {\n            row,\n            col\n          };\n        }\n      }\n    }\n    return null;\n  };\n  const isSquareAttacked = (tempBoard, row, col, attackerColor) => {\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const piece = tempBoard[r][c];\n        if (piece && (attackerColor === 'white' && piece.toUpperCase() === piece || attackerColor === 'black' && piece.toLowerCase() === piece)) {\n          if (isValidMove(piece, r, c, row, col, tempBoard)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n  const handleSquareClick = (row, col) => {\n    if (selectedPiece && !winner) {\n      const {\n        piece,\n        startRow,\n        startCol\n      } = selectedPiece;\n      if (isValidMove(piece, startRow, startCol, row, col, board) && !moveResultsInCheck(startRow, startCol, row, col)) {\n        const newBoard = board.map(r => r.slice());\n        newBoard[startRow][startCol] = '';\n        if (board[row][col]) {\n          if (turn === 'white') {\n            setBlackTaken([...blackTaken, board[row][col]]);\n          } else {\n            setWhiteTaken([...whiteTaken, board[row][col]]);\n          }\n        }\n        newBoard[row][col] = piece;\n        if (piece.toLowerCase() === 'p' && enPassant && enPassant.row === row && enPassant.col === col) {\n          newBoard[startRow][col] = '';\n          if (turn === 'white') {\n            setBlackTaken([...blackTaken, 'p']);\n          } else {\n            setWhiteTaken([...whiteTaken, 'P']);\n          }\n        }\n        if (piece.toLowerCase() === 'p' && Math.abs(startRow - row) === 2) {\n          setEnPassant({\n            row: (startRow + row) / 2,\n            col\n          });\n        } else {\n          setEnPassant(null);\n        }\n        setBoard(newBoard);\n        const opponent = turn === 'white' ? 'black' : 'white';\n        if (isCheckmate(opponent, newBoard)) {\n          setWinner(turn);\n        } else {\n          setTurn(turn === 'white' ? 'black' : 'white');\n        }\n      }\n      setSelectedPiece(null);\n      setHighlightedMoves([]);\n    } else if (board[row][col] && (turn === 'white' && board[row][col].toUpperCase() === board[row][col] || turn === 'black' && board[row][col].toLowerCase() === board[row][col])) {\n      setSelectedPiece({\n        piece: board[row][col],\n        startRow: row,\n        startCol: col\n      });\n      setHighlightedMoves(getPossibleMoves(board[row][col], row, col));\n    }\n  };\n  const handleDragStart = (e, piece, row, col) => {\n    if (turn === 'white' && piece.toUpperCase() === piece || turn === 'black' && piece.toLowerCase() === piece) {\n      setSelectedPiece({\n        piece,\n        startRow: row,\n        startCol: col\n      });\n      setHighlightedMoves(getPossibleMoves(piece, row, col));\n      const img = e.target.cloneNode(true);\n      img.style.position = \"absolute\";\n      img.style.opacity = \"1\";\n      img.style.transform = \"scale(1.2)\";\n      img.style.pointerEvents = \"none\";\n      img.style.zIndex = \"1000\";\n      document.body.appendChild(img);\n      dragImageRef.current = img;\n      e.dataTransfer.setDragImage(img, img.clientWidth / 2, img.clientHeight / 2);\n    } else {\n      e.preventDefault();\n    }\n  };\n  const handleDragEnd = () => {\n    if (dragImageRef.current) {\n      document.body.removeChild(dragImageRef.current);\n      dragImageRef.current = null;\n    }\n  };\n  const handleDragOver = (e, row, col) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = \"move\";\n  };\n  const handleDrop = (e, row, col) => {\n    e.preventDefault();\n    handleSquareClick(row, col);\n  };\n  const isCheckmate = (color, boardState) => {\n    const kingPosition = findKing(boardState, color === 'white' ? 'K' : 'k');\n    if (!kingPosition) return false;\n    const moves = getAllPossibleMoves(color, boardState);\n    return moves.length === 0 && isSquareAttacked(boardState, kingPosition.row, kingPosition.col, color === 'white' ? 'black' : 'white');\n  };\n  const getAllPossibleMoves = (color, boardState) => {\n    const moves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = boardState[row][col];\n        if (piece && (color === 'white' && piece.toUpperCase() === piece || color === 'black' && piece.toLowerCase() === piece)) {\n          moves.push(...getPossibleMoves(piece, row, col, boardState));\n        }\n      }\n    }\n    return moves;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [turn === 'white' ? 'White' : 'Black', \"'s Turn\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), winner && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [winner, \" wins by checkmate!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"taken-pieces\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"white-taken\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"White's Taken Pieces\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: whiteTaken.map((piece, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: pieceImages[piece],\n              alt: piece,\n              className: \"small-piece\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 68\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 50\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"black-taken\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Black's Taken Pieces\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: blackTaken.map((piece, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: pieceImages[piece],\n              alt: piece,\n              className: \"small-piece\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 68\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 50\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessboard\",\n      children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((piece, colIndex) => {\n          const isHighlighted = highlightedMoves.some(move => move.row === rowIndex && move.col === colIndex);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'} ${isHighlighted ? 'highlighted' : ''}`,\n            onClick: () => handleSquareClick(rowIndex, colIndex),\n            onDragOver: e => handleDragOver(e, rowIndex, colIndex),\n            onDrop: e => handleDrop(e, rowIndex, colIndex),\n            children: piece && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: pieceImages[piece],\n              alt: piece,\n              className: `piece ${selectedPiece && selectedPiece.startRow === rowIndex && selectedPiece.startCol === colIndex ? 'dragging' : ''}`,\n              draggable: true,\n              onDragStart: e => handleDragStart(e, piece, rowIndex, colIndex),\n              onDragEnd: handleDragEnd\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 29\n            }, this)\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 17\n          }, this);\n        })\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"a9ZAWvd71kkLxFO3HZPRFd8J9jE=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","initialBoardSetup","pieceImages","ChessBoard","_s","board","setBoard","selectedPiece","setSelectedPiece","turn","setTurn","highlightedMoves","setHighlightedMoves","enPassant","setEnPassant","whiteTaken","setWhiteTaken","blackTaken","setBlackTaken","winner","setWinner","dragImageRef","isValidMove","piece","startRow","startCol","endRow","endCol","boardState","dx","Math","abs","dy","toUpperCase","toLowerCase","row","col","isPathBlocked","x","y","getPossibleMoves","moves","moveResultsInCheck","push","tempBoard","map","r","slice","kingPosition","findKing","isSquareAttacked","king","attackerColor","c","handleSquareClick","newBoard","opponent","isCheckmate","handleDragStart","e","img","target","cloneNode","style","position","opacity","transform","pointerEvents","zIndex","document","body","appendChild","current","dataTransfer","setDragImage","clientWidth","clientHeight","preventDefault","handleDragEnd","removeChild","handleDragOver","dropEffect","handleDrop","color","getAllPossibleMoves","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","src","alt","rowIndex","colIndex","isHighlighted","some","move","onClick","onDragOver","onDrop","draggable","onDragStart","onDragEnd","_c","$RefreshReg$"],"sources":["/Users/shah/Desktop/chessGame/frontend/src/components/ChessBoard.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport './ChessBoard.css';\n\nconst initialBoardSetup = [\n  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],\n  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\n  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']\n];\n\nconst pieceImages = {\n  'P': '/images/pw.svg', 'R': '/images/rw.svg', 'N': '/images/nw.svg', 'B': '/images/bw.svg', 'Q': '/images/qw.svg', 'K': '/images/kw.svg',\n  'p': '/images/pb.svg', 'r': '/images/rb.svg', 'n': '/images/nb.svg', 'b': '/images/bb.svg', 'q': '/images/qb.svg', 'k': '/images/kb.svg'\n};\n\nconst ChessBoard = () => {\n  const [board, setBoard] = useState(initialBoardSetup);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [turn, setTurn] = useState('white');\n  const [highlightedMoves, setHighlightedMoves] = useState([]);\n  const [enPassant, setEnPassant] = useState(null);\n  const [whiteTaken, setWhiteTaken] = useState([]);\n  const [blackTaken, setBlackTaken] = useState([]);\n  const [winner, setWinner] = useState(null);\n  const dragImageRef = useRef(null);\n\n  const isValidMove = (piece, startRow, startCol, endRow, endCol, boardState) => {\n    const dx = Math.abs(endCol - startCol);\n    const dy = endRow - startRow;\n\n    if (boardState[endRow][endCol] && ((piece.toUpperCase() === piece && boardState[endRow][endCol].toUpperCase() === boardState[endRow][endCol]) || \n                                  (piece.toLowerCase() === piece && boardState[endRow][endCol].toLowerCase() === boardState[endRow][endCol]))) {\n      return false;\n    }\n\n    switch (piece.toLowerCase()) {\n      case 'p':\n        if (piece === 'P') {\n          if (startRow === 6 && endRow === 4 && dx === 0 && boardState[endRow][endCol] === '' && boardState[endRow + 1][endCol] === '') {\n            return true;\n          }\n          if (startRow === 3 && endRow === 2 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] === '' && enPassant && enPassant.row === endRow && enPassant.col === endCol) {\n            return true;\n          }\n          return (dy === -1 && dx === 0 && boardState[endRow][endCol] === '') || \n                 (dy === -1 && dx === 1 && boardState[endRow][endCol] !== '');\n        } else {\n          if (startRow === 1 && endRow === 3 && dx === 0 && boardState[endRow][endCol] === '' && boardState[endRow - 1][endCol] === '') {\n            return true;\n          }\n          if (startRow === 4 && endRow === 5 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] === '' && enPassant && enPassant.row === endRow && enPassant.col === endCol) {\n            return true;\n          }\n          return (dy === 1 && dx === 0 && boardState[endRow][endCol] === '') || \n                 (dy === 1 && dx === 1 && boardState[endRow][endCol] !== '');\n        }\n      case 'r':\n        return (dx === 0 || Math.abs(dy) === 0) && !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'n':\n        return dx * Math.abs(dy) === 2;\n      case 'b':\n        return dx === Math.abs(dy) && !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'q':\n        return (dx === 0 || Math.abs(dy) === 0 || dx === Math.abs(dy)) && !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'k':\n        return dx <= 1 && Math.abs(dy) <= 1;\n      default:\n        return false;\n    }\n  };\n\n  const isPathBlocked = (startRow, startCol, endRow, endCol, boardState) => {\n    const dx = endCol > startCol ? 1 : endCol < startCol ? -1 : 0;\n    const dy = endRow > startRow ? 1 : endRow < startRow ? -1 : 0;\n    let x = startCol + dx;\n    let y = startRow + dy;\n\n    while (x !== endCol || y !== endRow) {\n      if (boardState[y][x] !== '') return true;\n      x += dx;\n      y += dy;\n    }\n\n    return false;\n  };\n\n  const getPossibleMoves = (piece, startRow, startCol) => {\n    const moves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (isValidMove(piece, startRow, startCol, row, col, board) && !moveResultsInCheck(startRow, startCol, row, col)) {\n          moves.push({ row, col });\n        }\n      }\n    }\n    return moves;\n  };\n\n  const moveResultsInCheck = (startRow, startCol, endRow, endCol) => {\n    const tempBoard = board.map((r) => r.slice());\n    const piece = tempBoard[startRow][startCol];\n    tempBoard[startRow][startCol] = '';\n    tempBoard[endRow][endCol] = piece;\n\n    const kingPosition = findKing(tempBoard, turn === 'white' ? 'K' : 'k');\n    return isSquareAttacked(tempBoard, kingPosition.row, kingPosition.col, turn === 'white' ? 'black' : 'white');\n  };\n\n  const findKing = (tempBoard, king) => {\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoard[row][col] === king) {\n          return { row, col };\n        }\n      }\n    }\n    return null;\n  };\n\n  const isSquareAttacked = (tempBoard, row, col, attackerColor) => {\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const piece = tempBoard[r][c];\n        if (piece && ((attackerColor === 'white' && piece.toUpperCase() === piece) || (attackerColor === 'black' && piece.toLowerCase() === piece))) {\n          if (isValidMove(piece, r, c, row, col, tempBoard)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const handleSquareClick = (row, col) => {\n    if (selectedPiece && !winner) {\n      const { piece, startRow, startCol } = selectedPiece;\n      if (isValidMove(piece, startRow, startCol, row, col, board) && !moveResultsInCheck(startRow, startCol, row, col)) {\n        const newBoard = board.map((r) => r.slice());\n        newBoard[startRow][startCol] = '';\n        \n        if (board[row][col]) {\n          if (turn === 'white') {\n            setBlackTaken([...blackTaken, board[row][col]]);\n          } else {\n            setWhiteTaken([...whiteTaken, board[row][col]]);\n          }\n        }\n\n        newBoard[row][col] = piece;\n\n        if (piece.toLowerCase() === 'p' && enPassant && enPassant.row === row && enPassant.col === col) {\n          newBoard[startRow][col] = '';\n          if (turn === 'white') {\n            setBlackTaken([...blackTaken, 'p']);\n          } else {\n            setWhiteTaken([...whiteTaken, 'P']);\n          }\n        }\n\n        if (piece.toLowerCase() === 'p' && Math.abs(startRow - row) === 2) {\n          setEnPassant({ row: (startRow + row) / 2, col });\n        } else {\n          setEnPassant(null);\n        }\n\n        setBoard(newBoard);\n\n        const opponent = turn === 'white' ? 'black' : 'white';\n        if (isCheckmate(opponent, newBoard)) {\n          setWinner(turn);\n        } else {\n          setTurn(turn === 'white' ? 'black' : 'white');\n        }\n      }\n      setSelectedPiece(null);\n      setHighlightedMoves([]);\n    } else if (board[row][col] && ((turn === 'white' && board[row][col].toUpperCase() === board[row][col]) || (turn === 'black' && board[row][col].toLowerCase() === board[row][col]))) {\n      setSelectedPiece({ piece: board[row][col], startRow: row, startCol: col });\n      setHighlightedMoves(getPossibleMoves(board[row][col], row, col));\n    }\n  };\n\n  const handleDragStart = (e, piece, row, col) => {\n    if ((turn === 'white' && piece.toUpperCase() === piece) || (turn === 'black' && piece.toLowerCase() === piece)) {\n      setSelectedPiece({ piece, startRow: row, startCol: col });\n      setHighlightedMoves(getPossibleMoves(piece, row, col));\n\n      const img = e.target.cloneNode(true);\n      img.style.position = \"absolute\";\n      img.style.opacity = \"1\";\n      img.style.transform = \"scale(1.2)\";\n      img.style.pointerEvents = \"none\";\n      img.style.zIndex = \"1000\";\n      document.body.appendChild(img);\n      dragImageRef.current = img;\n      e.dataTransfer.setDragImage(img, img.clientWidth / 2, img.clientHeight / 2);\n    } else {\n      e.preventDefault();\n    }\n  };\n\n  const handleDragEnd = () => {\n    if (dragImageRef.current) {\n      document.body.removeChild(dragImageRef.current);\n      dragImageRef.current = null;\n    }\n  };\n\n  const handleDragOver = (e, row, col) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = \"move\";\n  };\n\n  const handleDrop = (e, row, col) => {\n    e.preventDefault();\n    handleSquareClick(row, col);\n  };\n\n  const isCheckmate = (color, boardState) => {\n    const kingPosition = findKing(boardState, color === 'white' ? 'K' : 'k');\n    if (!kingPosition) return false;\n\n    const moves = getAllPossibleMoves(color, boardState);\n    return moves.length === 0 && isSquareAttacked(boardState, kingPosition.row, kingPosition.col, color === 'white' ? 'black' : 'white');\n  };\n\n  const getAllPossibleMoves = (color, boardState) => {\n    const moves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = boardState[row][col];\n        if (piece && ((color === 'white' && piece.toUpperCase() === piece) || (color === 'black' && piece.toLowerCase() === piece))) {\n          moves.push(...getPossibleMoves(piece, row, col, boardState));\n        }\n      }\n    }\n    return moves;\n  };\n\n  return (\n    <div className=\"game-container\">\n      <h2>{turn === 'white' ? 'White' : 'Black'}'s Turn</h2>\n      {winner && <h3>{winner} wins by checkmate!</h3>}\n      <div className=\"taken-pieces\">\n        <div className=\"white-taken\">\n          <h3>White's Taken Pieces</h3>\n          <div>{whiteTaken.map((piece, index) => <span key={index}><img src={pieceImages[piece]} alt={piece} className=\"small-piece\" /></span>)}</div>\n        </div>\n        <div className=\"black-taken\">\n          <h3>Black's Taken Pieces</h3>\n          <div>{blackTaken.map((piece, index) => <span key={index}><img src={pieceImages[piece]} alt={piece} className=\"small-piece\" /></span>)}</div>\n        </div>\n      </div>\n      <div className=\"chessboard\">\n        {board.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"row\">\n            {row.map((piece, colIndex) => {\n              const isHighlighted = highlightedMoves.some(move => move.row === rowIndex && move.col === colIndex);\n              return (\n                <div\n                  key={colIndex}\n                  className={`square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'} ${isHighlighted ? 'highlighted' : ''}`}\n                  onClick={() => handleSquareClick(rowIndex, colIndex)}\n                  onDragOver={(e) => handleDragOver(e, rowIndex, colIndex)}\n                  onDrop={(e) => handleDrop(e, rowIndex, colIndex)}\n                >\n                  {piece && <img\n                    src={pieceImages[piece]}\n                    alt={piece}\n                    className={`piece ${selectedPiece && selectedPiece.startRow === rowIndex && selectedPiece.startCol === colIndex ? 'dragging' : ''}`}\n                    draggable\n                    onDragStart={(e) => handleDragStart(e, piece, rowIndex, colIndex)}\n                    onDragEnd={handleDragEnd}\n                  />}\n                </div>\n              );\n            })}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ChessBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}