{"ast":null,"code":"const isValidMove = (piece, startRow, startCol, endRow, endCol) => {\n  // Basic move validation for each piece\n  const dx = Math.abs(endCol - startCol);\n  const dy = endRow - startRow;\n  switch (piece.toLowerCase()) {\n    case 'p':\n      // Pawn\n      if (piece === 'P') {\n        // White pawn\n        return dy === -1 && dx === 0 && board[endRow][endCol] === '' ||\n        // Move forward\n        dy === -1 && dx === 1 && board[endRow][endCol] !== ''; // Capture\n      } else {\n        // Black pawn\n        return dy === 1 && dx === 0 && board[endRow][endCol] === '' ||\n        // Move forward\n        dy === 1 && dx === 1 && board[endRow][endCol] !== ''; // Capture\n      }\n    case 'r':\n      // Rook\n      return (dx === 0 || Math.abs(dy) === 0) && !isPathBlocked(startRow, startCol, endRow, endCol);\n    case 'n':\n      // Knight\n      return dx * Math.abs(dy) === 2;\n    case 'b':\n      // Bishop\n      return dx === Math.abs(dy) && !isPathBlocked(startRow, startCol, endRow, endCol);\n    case 'q':\n      // Queen\n      return (dx === 0 || Math.abs(dy) === 0 || dx === Math.abs(dy)) && !isPathBlocked(startRow, startCol, endRow, endCol);\n    case 'k':\n      // King\n      return dx <= 1 && Math.abs(dy) <= 1;\n    default:\n      return false;\n  }\n};","map":{"version":3,"names":["isValidMove","piece","startRow","startCol","endRow","endCol","dx","Math","abs","dy","toLowerCase","board","isPathBlocked"],"sources":["/Users/shah/Desktop/chessGame/frontend/src/components/ChessBoard.js"],"sourcesContent":["const isValidMove = (piece, startRow, startCol, endRow, endCol) => {\n    // Basic move validation for each piece\n    const dx = Math.abs(endCol - startCol);\n    const dy = endRow - startRow;\n  \n    switch (piece.toLowerCase()) {\n      case 'p': // Pawn\n        if (piece === 'P') { // White pawn\n          return (dy === -1 && dx === 0 && board[endRow][endCol] === '') || // Move forward\n                 (dy === -1 && dx === 1 && board[endRow][endCol] !== ''); // Capture\n        } else { // Black pawn\n          return (dy === 1 && dx === 0 && board[endRow][endCol] === '') || // Move forward\n                 (dy === 1 && dx === 1 && board[endRow][endCol] !== ''); // Capture\n        }\n      case 'r': // Rook\n        return (dx === 0 || Math.abs(dy) === 0) && !isPathBlocked(startRow, startCol, endRow, endCol);\n      case 'n': // Knight\n        return dx * Math.abs(dy) === 2;\n      case 'b': // Bishop\n        return dx === Math.abs(dy) && !isPathBlocked(startRow, startCol, endRow, endCol);\n      case 'q': // Queen\n        return (dx === 0 || Math.abs(dy) === 0 || dx === Math.abs(dy)) && !isPathBlocked(startRow, startCol, endRow, endCol);\n      case 'k': // King\n        return dx <= 1 && Math.abs(dy) <= 1;\n      default:\n        return false;\n    }\n  };\n  "],"mappings":"AAAA,MAAMA,WAAW,GAAGA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,MAAM,KAAK;EAC/D;EACA,MAAMC,EAAE,GAAGC,IAAI,CAACC,GAAG,CAACH,MAAM,GAAGF,QAAQ,CAAC;EACtC,MAAMM,EAAE,GAAGL,MAAM,GAAGF,QAAQ;EAE5B,QAAQD,KAAK,CAACS,WAAW,CAAC,CAAC;IACzB,KAAK,GAAG;MAAE;MACR,IAAIT,KAAK,KAAK,GAAG,EAAE;QAAE;QACnB,OAAQQ,EAAE,KAAK,CAAC,CAAC,IAAIH,EAAE,KAAK,CAAC,IAAIK,KAAK,CAACP,MAAM,CAAC,CAACC,MAAM,CAAC,KAAK,EAAE;QAAK;QAC1DI,EAAE,KAAK,CAAC,CAAC,IAAIH,EAAE,KAAK,CAAC,IAAIK,KAAK,CAACP,MAAM,CAAC,CAACC,MAAM,CAAC,KAAK,EAAG,CAAC,CAAC;MAClE,CAAC,MAAM;QAAE;QACP,OAAQI,EAAE,KAAK,CAAC,IAAIH,EAAE,KAAK,CAAC,IAAIK,KAAK,CAACP,MAAM,CAAC,CAACC,MAAM,CAAC,KAAK,EAAE;QAAK;QACzDI,EAAE,KAAK,CAAC,IAAIH,EAAE,KAAK,CAAC,IAAIK,KAAK,CAACP,MAAM,CAAC,CAACC,MAAM,CAAC,KAAK,EAAG,CAAC,CAAC;MACjE;IACF,KAAK,GAAG;MAAE;MACR,OAAO,CAACC,EAAE,KAAK,CAAC,IAAIC,IAAI,CAACC,GAAG,CAACC,EAAE,CAAC,KAAK,CAAC,KAAK,CAACG,aAAa,CAACV,QAAQ,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,MAAM,CAAC;IAC/F,KAAK,GAAG;MAAE;MACR,OAAOC,EAAE,GAAGC,IAAI,CAACC,GAAG,CAACC,EAAE,CAAC,KAAK,CAAC;IAChC,KAAK,GAAG;MAAE;MACR,OAAOH,EAAE,KAAKC,IAAI,CAACC,GAAG,CAACC,EAAE,CAAC,IAAI,CAACG,aAAa,CAACV,QAAQ,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,MAAM,CAAC;IAClF,KAAK,GAAG;MAAE;MACR,OAAO,CAACC,EAAE,KAAK,CAAC,IAAIC,IAAI,CAACC,GAAG,CAACC,EAAE,CAAC,KAAK,CAAC,IAAIH,EAAE,KAAKC,IAAI,CAACC,GAAG,CAACC,EAAE,CAAC,KAAK,CAACG,aAAa,CAACV,QAAQ,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,MAAM,CAAC;IACtH,KAAK,GAAG;MAAE;MACR,OAAOC,EAAE,IAAI,CAAC,IAAIC,IAAI,CAACC,GAAG,CAACC,EAAE,CAAC,IAAI,CAAC;IACrC;MACE,OAAO,KAAK;EAChB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}