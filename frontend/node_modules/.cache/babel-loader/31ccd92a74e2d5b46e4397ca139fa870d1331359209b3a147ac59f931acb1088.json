{"ast":null,"code":"var _jsxFileName = \"/Users/shah/Desktop/chessGame/frontend/src/components/ChessBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './ChessBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialBoardSetup = [['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'], ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'], ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']];\nconst pieceImages = {\n  'P': '/images/pw.svg',\n  'R': '/images/rw.svg',\n  'N': '/images/nw.svg',\n  'B': '/images/bw.svg',\n  'Q': '/images/qw.svg',\n  'K': '/images/kw.svg',\n  'p': '/images/pb.svg',\n  'r': '/images/rb.svg',\n  'n': '/images/nb.svg',\n  'b': '/images/bb.svg',\n  'q': '/images/qb.svg',\n  'k': '/images/kb.svg'\n};\nconst ChessBoard = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoardSetup);\n  const [turn, setTurn] = useState('white');\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [highlightedMoves, setHighlightedMoves] = useState([]);\n  const [whiteTaken, setWhiteTaken] = useState([]);\n  const [blackTaken, setBlackTaken] = useState([]);\n  const [enPassant, setEnPassant] = useState(null);\n  const [winner, setWinner] = useState(null);\n  const handleSquareClick = (row, col) => {\n    if (selectedPiece) {\n      const {\n        piece,\n        startRow,\n        startCol\n      } = selectedPiece;\n      const validMove = highlightedMoves.some(move => move.row === row && move.col === col);\n      if (validMove) {\n        const newBoard = board.map(row => row.slice());\n\n        // Capture logic\n        if (board[row][col]) {\n          if (turn === 'white') {\n            setBlackTaken([...blackTaken, board[row][col]]);\n          } else {\n            setWhiteTaken([...whiteTaken, board[row][col]]);\n          }\n        }\n        newBoard[row][col] = piece;\n        newBoard[startRow][startCol] = '';\n\n        // Handle en passant capture\n        if (piece.toLowerCase() === 'p' && enPassant && enPassant.row === row && enPassant.col === col) {\n          newBoard[startRow][col] = '';\n          if (turn === 'white') {\n            setBlackTaken([...blackTaken, 'p']);\n          } else {\n            setWhiteTaken([...whiteTaken, 'P']);\n          }\n        }\n\n        // Set en passant opportunities\n        if (piece.toLowerCase() === 'p' && Math.abs(startRow - row) === 2) {\n          setEnPassant({\n            row: (startRow + row) / 2,\n            col\n          });\n        } else {\n          setEnPassant(null);\n        }\n        setBoard(newBoard);\n\n        // Check if the move results in checkmate\n        const opponent = turn === 'white' ? 'black' : 'white';\n        if (isCheckmate(opponent, newBoard)) {\n          setWinner(turn);\n        } else {\n          setTurn(turn === 'white' ? 'black' : 'white'); // Change turn\n        }\n      }\n      setSelectedPiece(null);\n      setHighlightedMoves([]);\n    } else if (board[row][col] && (turn === 'white' && board[row][col].toUpperCase() === board[row][col] || turn === 'black' && board[row][col].toLowerCase() === board[row][col])) {\n      setSelectedPiece({\n        piece: board[row][col],\n        startRow: row,\n        startCol: col\n      });\n      setHighlightedMoves(getPossibleMoves(board[row][col], row, col));\n    }\n  };\n  const handleDragStart = (e, piece, row, col) => {\n    if (turn === 'white' && piece.toUpperCase() === piece || turn === 'black' && piece.toLowerCase() === piece) {\n      setSelectedPiece({\n        piece,\n        startRow: row,\n        startCol: col\n      });\n      setHighlightedMoves(getPossibleMoves(piece, row, col));\n      const img = new Image();\n      img.src = pieceImages[piece];\n      e.dataTransfer.setDragImage(img, 40, 40); // Customize the drag image\n    } else {\n      e.preventDefault(); // Prevent drag if it's not the player's turn\n    }\n  };\n  const handleDragOver = (e, row, col) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = \"move\"; // Change cursor to move icon\n  };\n  const handleDrop = (e, row, col) => {\n    e.preventDefault();\n    handleSquareClick(row, col);\n  };\n  const isCheckmate = (color, boardState) => {\n    const kingPosition = findKing(boardState, color === 'white' ? 'K' : 'k');\n    if (!kingPosition) return false;\n    const moves = getAllPossibleMoves(color, boardState);\n    return moves.length === 0 && isSquareAttacked(boardState, kingPosition.row, kingPosition.col, color === 'white' ? 'black' : 'white');\n  };\n  const getAllPossibleMoves = (color, boardState) => {\n    const moves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = boardState[row][col];\n        if (piece && (color === 'white' && piece.toUpperCase() === piece || color === 'black' && piece.toLowerCase() === piece)) {\n          moves.push(...getPossibleMoves(piece, row, col, boardState));\n        }\n      }\n    }\n    return moves;\n  };\n  const getPossibleMoves = (piece, row, col, boardState = board) => {\n    // Add the move generation logic here...\n    // This function should return an array of valid moves for the given piece and position.\n  };\n  const findKing = (boardState, king) => {\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (boardState[row][col] === king) {\n          return {\n            row,\n            col\n          };\n        }\n      }\n    }\n    return null;\n  };\n  const isSquareAttacked = (boardState, row, col, attackingColor) => {\n    // Add logic to check if a square is attacked by any piece of the attackingColor.\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [turn === 'white' ? 'White' : 'Black', \"'s Turn\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), winner && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [winner, \" wins by checkmate!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"taken-pieces\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"white-taken\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"White's Taken Pieces\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: whiteTaken.map((piece, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: pieceImages[piece],\n              alt: piece,\n              className: \"small-piece\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 68\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 50\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"black-taken\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Black's Taken Pieces\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: blackTaken.map((piece, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: pieceImages[piece],\n              alt: piece,\n              className: \"small-piece\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 68\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 50\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessboard\",\n      children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((piece, colIndex) => {\n          const isHighlighted = highlightedMoves.some(move => move.row === rowIndex && move.col === colIndex);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'} ${isHighlighted ? 'highlighted' : ''}`,\n            onClick: () => handleSquareClick(rowIndex, colIndex),\n            onDragOver: e => handleDragOver(e, rowIndex, colIndex),\n            onDrop: e => handleDrop(e, rowIndex, colIndex),\n            children: piece && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: pieceImages[piece],\n              alt: piece,\n              className: `piece ${selectedPiece && selectedPiece.startRow === rowIndex && selectedPiece.startCol === colIndex ? 'dragging' : ''}`,\n              draggable: true,\n              onDragStart: e => handleDragStart(e, piece, rowIndex, colIndex)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 29\n            }, this)\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 17\n          }, this);\n        })\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"whcIoQIly22FpnPZWd2Pd7QHjuM=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","initialBoardSetup","pieceImages","ChessBoard","_s","board","setBoard","turn","setTurn","selectedPiece","setSelectedPiece","highlightedMoves","setHighlightedMoves","whiteTaken","setWhiteTaken","blackTaken","setBlackTaken","enPassant","setEnPassant","winner","setWinner","handleSquareClick","row","col","piece","startRow","startCol","validMove","some","move","newBoard","map","slice","toLowerCase","Math","abs","opponent","isCheckmate","toUpperCase","getPossibleMoves","handleDragStart","e","img","Image","src","dataTransfer","setDragImage","preventDefault","handleDragOver","dropEffect","handleDrop","color","boardState","kingPosition","findKing","moves","getAllPossibleMoves","length","isSquareAttacked","push","king","attackingColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","alt","rowIndex","colIndex","isHighlighted","onClick","onDragOver","onDrop","draggable","onDragStart","_c","$RefreshReg$"],"sources":["/Users/shah/Desktop/chessGame/frontend/src/components/ChessBoard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './ChessBoard.css';\n\nconst initialBoardSetup = [\n  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],\n  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\n  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']\n];\n\nconst pieceImages = {\n  'P': '/images/pw.svg', 'R': '/images/rw.svg', 'N': '/images/nw.svg', 'B': '/images/bw.svg', 'Q': '/images/qw.svg', 'K': '/images/kw.svg',\n  'p': '/images/pb.svg', 'r': '/images/rb.svg', 'n': '/images/nb.svg', 'b': '/images/bb.svg', 'q': '/images/qb.svg', 'k': '/images/kb.svg'\n};\n\nconst ChessBoard = () => {\n  const [board, setBoard] = useState(initialBoardSetup);\n  const [turn, setTurn] = useState('white');\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [highlightedMoves, setHighlightedMoves] = useState([]);\n  const [whiteTaken, setWhiteTaken] = useState([]);\n  const [blackTaken, setBlackTaken] = useState([]);\n  const [enPassant, setEnPassant] = useState(null);\n  const [winner, setWinner] = useState(null);\n\n  const handleSquareClick = (row, col) => {\n    if (selectedPiece) {\n      const { piece, startRow, startCol } = selectedPiece;\n      const validMove = highlightedMoves.some(move => move.row === row && move.col === col);\n      if (validMove) {\n        const newBoard = board.map(row => row.slice());\n\n        // Capture logic\n        if (board[row][col]) {\n          if (turn === 'white') {\n            setBlackTaken([...blackTaken, board[row][col]]);\n          } else {\n            setWhiteTaken([...whiteTaken, board[row][col]]);\n          }\n        }\n\n        newBoard[row][col] = piece;\n        newBoard[startRow][startCol] = '';\n\n        // Handle en passant capture\n        if (piece.toLowerCase() === 'p' && enPassant && enPassant.row === row && enPassant.col === col) {\n          newBoard[startRow][col] = '';\n          if (turn === 'white') {\n            setBlackTaken([...blackTaken, 'p']);\n          } else {\n            setWhiteTaken([...whiteTaken, 'P']);\n          }\n        }\n\n        // Set en passant opportunities\n        if (piece.toLowerCase() === 'p' && Math.abs(startRow - row) === 2) {\n          setEnPassant({ row: (startRow + row) / 2, col });\n        } else {\n          setEnPassant(null);\n        }\n\n        setBoard(newBoard);\n\n        // Check if the move results in checkmate\n        const opponent = turn === 'white' ? 'black' : 'white';\n        if (isCheckmate(opponent, newBoard)) {\n          setWinner(turn);\n        } else {\n          setTurn(turn === 'white' ? 'black' : 'white'); // Change turn\n        }\n      }\n      setSelectedPiece(null);\n      setHighlightedMoves([]);\n    } else if (board[row][col] && ((turn === 'white' && board[row][col].toUpperCase() === board[row][col]) || (turn === 'black' && board[row][col].toLowerCase() === board[row][col]))) {\n      setSelectedPiece({ piece: board[row][col], startRow: row, startCol: col });\n      setHighlightedMoves(getPossibleMoves(board[row][col], row, col));\n    }\n  };\n\n  const handleDragStart = (e, piece, row, col) => {\n    if ((turn === 'white' && piece.toUpperCase() === piece) || (turn === 'black' && piece.toLowerCase() === piece)) {\n      setSelectedPiece({ piece, startRow: row, startCol: col });\n      setHighlightedMoves(getPossibleMoves(piece, row, col));\n      const img = new Image();\n      img.src = pieceImages[piece];\n      e.dataTransfer.setDragImage(img, 40, 40); // Customize the drag image\n    } else {\n      e.preventDefault(); // Prevent drag if it's not the player's turn\n    }\n  };\n\n  const handleDragOver = (e, row, col) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = \"move\"; // Change cursor to move icon\n  };\n\n  const handleDrop = (e, row, col) => {\n    e.preventDefault();\n    handleSquareClick(row, col);\n  };\n\n  const isCheckmate = (color, boardState) => {\n    const kingPosition = findKing(boardState, color === 'white' ? 'K' : 'k');\n    if (!kingPosition) return false;\n\n    const moves = getAllPossibleMoves(color, boardState);\n    return moves.length === 0 && isSquareAttacked(boardState, kingPosition.row, kingPosition.col, color === 'white' ? 'black' : 'white');\n  };\n\n  const getAllPossibleMoves = (color, boardState) => {\n    const moves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = boardState[row][col];\n        if (piece && ((color === 'white' && piece.toUpperCase() === piece) || (color === 'black' && piece.toLowerCase() === piece))) {\n          moves.push(...getPossibleMoves(piece, row, col, boardState));\n        }\n      }\n    }\n    return moves;\n  };\n\n  const getPossibleMoves = (piece, row, col, boardState = board) => {\n    // Add the move generation logic here...\n    // This function should return an array of valid moves for the given piece and position.\n  };\n\n  const findKing = (boardState, king) => {\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (boardState[row][col] === king) {\n          return { row, col };\n        }\n      }\n    }\n    return null;\n  };\n\n  const isSquareAttacked = (boardState, row, col, attackingColor) => {\n    // Add logic to check if a square is attacked by any piece of the attackingColor.\n  };\n\n  return (\n    <div className=\"game-container\">\n      <h2>{turn === 'white' ? 'White' : 'Black'}'s Turn</h2>\n      {winner && <h3>{winner} wins by checkmate!</h3>}\n      <div className=\"taken-pieces\">\n        <div className=\"white-taken\">\n          <h3>White's Taken Pieces</h3>\n          <div>{whiteTaken.map((piece, index) => <span key={index}><img src={pieceImages[piece]} alt={piece} className=\"small-piece\" /></span>)}</div>\n        </div>\n        <div className=\"black-taken\">\n          <h3>Black's Taken Pieces</h3>\n          <div>{blackTaken.map((piece, index) => <span key={index}><img src={pieceImages[piece]} alt={piece} className=\"small-piece\" /></span>)}</div>\n        </div>\n      </div>\n      <div className=\"chessboard\">\n        {board.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"row\">\n            {row.map((piece, colIndex) => {\n              const isHighlighted = highlightedMoves.some(move => move.row === rowIndex && move.col === colIndex);\n              return (\n                <div\n                  key={colIndex}\n                  className={`square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'} ${isHighlighted ? 'highlighted' : ''}`}\n                  onClick={() => handleSquareClick(rowIndex, colIndex)}\n                  onDragOver={(e) => handleDragOver(e, rowIndex, colIndex)}\n                  onDrop={(e) => handleDrop(e, rowIndex, colIndex)}\n                >\n                  {piece && <img\n                    src={pieceImages[piece]}\n                    alt={piece}\n                    className={`piece ${selectedPiece && selectedPiece.startRow === rowIndex && selectedPiece.startCol === colIndex ? 'dragging' : ''}`}\n                    draggable\n                    onDragStart={(e) => handleDragStart(e, piece, rowIndex, colIndex)}\n                  />}\n                </div>\n              );\n            })}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ChessBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}