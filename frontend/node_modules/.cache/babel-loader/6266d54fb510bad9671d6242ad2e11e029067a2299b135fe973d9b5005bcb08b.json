{"ast":null,"code":"var _jsxFileName = \"/Users/shah/Desktop/chessGame/frontend/src/components/ChessBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './ChessBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialBoardSetup = [['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'], ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'], ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']];\nconst pieceImages = {\n  'P': '/images/pw.svg',\n  'R': '/images/rw.svg',\n  'N': '/images/nw.svg',\n  'B': '/images/bw.svg',\n  'Q': '/images/qw.svg',\n  'K': '/images/kw.svg',\n  'p': '/images/pb.svg',\n  'r': '/images/rb.svg',\n  'n': '/images/nb.svg',\n  'b': '/images/bb.svg',\n  'q': '/images/qb.svg',\n  'k': '/images/kb.svg'\n};\nconst ChessBoard = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoardSetup);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [turn, setTurn] = useState('white');\n  const [highlightedMoves, setHighlightedMoves] = useState([]);\n  const [enPassant, setEnPassant] = useState(null);\n  const [whiteTaken, setWhiteTaken] = useState([]);\n  const [blackTaken, setBlackTaken] = useState([]);\n  const [winner, setWinner] = useState(null);\n  const [kingMoved, setKingMoved] = useState({\n    white: false,\n    black: false\n  });\n  const [rookMoved, setRookMoved] = useState({\n    white: {\n      queenside: false,\n      kingside: false\n    },\n    black: {\n      queenside: false,\n      kingside: false\n    }\n  });\n  const isPathBlocked = (startRow, startCol, endRow, endCol, boardState) => {\n    const dx = endCol > startCol ? 1 : endCol < startCol ? -1 : 0;\n    const dy = endRow > startRow ? 1 : endRow < startRow ? -1 : 0;\n    let x = startCol + dx;\n    let y = startRow + dy;\n    while (x !== endCol || y !== endRow) {\n      if (boardState[y][x] !== '') return true;\n      x += dx;\n      y += dy;\n    }\n    return false;\n  };\n  const isValidMove = (piece, startRow, startCol, endRow, endCol, boardState) => {\n    const dx = Math.abs(endCol - startCol);\n    const dy = Math.abs(endRow - startRow);\n    if (boardState[endRow][endCol] && (piece.toUpperCase() === piece && boardState[endRow][endCol].toUpperCase() === boardState[endRow][endCol] || piece.toLowerCase() === piece && boardState[endRow][endCol].toLowerCase() === boardState[endRow][endCol])) {\n      return false; // Cannot move to a square occupied by the same color piece\n    }\n    switch (piece.toLowerCase()) {\n      case 'p':\n        // Pawn\n        if (piece === 'P') {\n          // White pawn\n          if (startRow === 6 && endRow === 4 && dx === 0 && boardState[endRow][endCol] === '' && boardState[endRow + 1][endCol] === '') {\n            // First move two squares\n            return true;\n          }\n          if (startRow === 3 && endRow === 2 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] === '' && enPassant && enPassant.row === endRow && enPassant.col === endCol) {\n            // En passant\n            return true;\n          }\n          return dy === -1 && dx === 0 && boardState[endRow][endCol] === '' ||\n          // Move forward\n          dy === -1 && dx === 1 && boardState[endRow][endCol] !== ''; // Capture\n        } else {\n          // Black pawn\n          if (startRow === 1 && endRow === 3 && dx === 0 && boardState[endRow][endCol] === '' && boardState[endRow - 1][endCol] === '') {\n            // First move two squares\n            return true;\n          }\n          if (startRow === 4 && endRow === 5 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] === '' && enPassant && enPassant.row === endRow && enPassant.col === endCol) {\n            // En passant\n            return true;\n          }\n          return dy === 1 && dx === 0 && boardState[endRow][endCol] === '' ||\n          // Move forward\n          dy === 1 && dx === 1 && boardState[endRow][endCol] !== ''; // Capture\n        }\n      case 'r':\n        // Rook\n        return (dx === 0 || Math.abs(dy) === 0) && !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'n':\n        // Knight\n        return dx * Math.abs(dy) === 2;\n      case 'b':\n        // Bishop\n        return dx === Math.abs(dy) && !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'q':\n        // Queen\n        return (dx === 0 || Math.abs(dy) === 0 || dx === Math.abs(dy)) && !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'k':\n        // King\n        if (dx === 2 && dy === 0 && !kingMoved[turn] && !isSquareAttacked(boardState, startRow, startCol, turn)) {\n          // Assuming kingside is to the right and queenside to the left\n          const direction = endCol > startCol ? 1 : -1;\n          const rookCol = direction === 1 ? 7 : 0;\n          const rookDestCol = direction === 1 ? 5 : 3;\n          if (boardState[startRow][rookCol].toLowerCase() === 'r' && !rookMoved[turn][direction === 1 ? 'kingside' : 'queenside']) {\n            for (let col = startCol + direction; col !== endCol + direction; col += direction) {\n              if (boardState[startRow][col] !== '' || isSquareAttacked(boardState, startRow, col, turn)) {\n                return false;\n              }\n            }\n            return true;\n          }\n        }\n        return dx <= 1 && dy === 0 && !isSquareAttacked(boardState, endRow, endCol, turn);\n      default:\n        return false;\n    }\n  };\n  const isSquareAttacked = (boardState, row, col, attackerColor) => {\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const piece = boardState[r][c];\n        if (piece && (attackerColor === 'white' && piece.toUpperCase() === piece || attackerColor === 'black' && piece.toLowerCase() === piece)) {\n          if (isValidMove(piece, r, c, row, col, boardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n  const findKing = (boardState, king) => {\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (boardState[row][col] === king) {\n          return {\n            row,\n            col\n          };\n        }\n      }\n    }\n    return null;\n  };\n  const moveResultsInCheck = (startRow, startCol, endRow, endCol) => {\n    const tempBoard = board.map(r => r.slice());\n    const piece = tempBoard[startRow][startCol];\n    tempBoard[startRow][startCol] = '';\n    tempBoard[endRow][endCol] = piece;\n    const kingPosition = findKing(tempBoard, turn === 'white' ? 'K' : 'k');\n    if (!kingPosition) {\n      return false; // If no king is found, cannot be in check (error case, handled by findKing)\n    }\n    return isSquareAttacked(tempBoard, kingPosition.row, kingPosition.col, turn === 'white' ? 'black' : 'white');\n  };\n  const getPossibleMoves = (piece, startRow, startCol) => {\n    const moves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (isValidMove(piece, startRow, startCol, row, col, board) && !moveResultsInCheck(startRow, startCol, row, col)) {\n          moves.push({\n            row,\n            col\n          });\n        }\n      }\n    }\n\n    // Add castling moves if the piece is a king and hasn't moved\n    if (piece.toLowerCase() === 'k' && !kingMoved[turn]) {\n      // Kingside castling\n      if (!rookMoved[turn].kingside && !isPathBlocked(startRow, startCol, startRow, 7, board)) {\n        if (!isSquareAttacked(board, startRow, startCol, turn) && !isSquareAttacked(board, startRow, startCol + 1, turn) && !isSquareAttacked(board, startRow, startCol + 2, turn)) {\n          moves.push({\n            row: startRow,\n            col: startCol + 2\n          });\n        }\n      }\n      // Queenside castling\n      if (!rookMoved[turn].queenside && !isPathBlocked(startRow, startCol, startRow, 0, board)) {\n        if (!isSquareAttacked(board, startRow, startCol, turn) && !isSquareAttacked(board, startRow, startCol - 1, turn) && !isSquareAttacked(board, startRow, startCol - 2, turn)) {\n          moves.push({\n            row: startRow,\n            col: startCol - 2\n          });\n        }\n      }\n    }\n    return moves;\n  };\n  const isCheckmate = (color, boardState) => {\n    const kingPosition = findKing(boardState, color === 'white' ? 'K' : 'k');\n    if (!kingPosition) return false;\n    const moves = getAllPossibleMoves(color, boardState);\n    return moves.length === 0 && isSquareAttacked(boardState, kingPosition.row, kingPosition.col, color === 'white' ? 'black' : 'white');\n  };\n  const getAllPossibleMoves = (color, boardState) => {\n    const moves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = boardState[row][col];\n        if (piece && (color === 'white' && piece.toUpperCase() === piece || color === 'black' && piece.toLowerCase() === piece)) {\n          moves.push(...getPossibleMoves(piece, row, col));\n        }\n      }\n    }\n    return moves;\n  };\n  const handleSquareClick = (row, col) => {\n    if (selectedPiece && !winner) {\n      const {\n        piece,\n        startRow,\n        startCol\n      } = selectedPiece;\n      if (isValidMove(piece, startRow, startCol, row, col, board) && !moveResultsInCheck(startRow, startCol, row, col)) {\n        const newBoard = board.map(r => r.slice());\n        newBoard[startRow][startCol] = '';\n\n        // Handle castling move specifics\n        if (piece.toLowerCase() === 'k' && Math.abs(startCol - col) === 2) {\n          const kingside = col > startCol;\n          const rookStartCol = kingside ? 7 : 0;\n          const rookEndCol = kingside ? 5 : 3;\n          newBoard[startRow][rookEndCol] = newBoard[startRow][rookStartCol];\n          newBoard[startRow][rookStartCol] = '';\n          setRookMoved({\n            ...rookMoved,\n            [turn]: {\n              ...rookMoved[turn],\n              [kingside ? 'kingside' : 'queenside']: true\n            }\n          });\n        }\n\n        // Track taken pieces\n        if (board[row][col]) {\n          if (turn === 'white') {\n            setBlackTaken([...blackTaken, board[row][col]]);\n          } else {\n            setWhiteTaken([...whiteTaken, board[row][col]]);\n          }\n        }\n\n        // Auto-queen for pawns\n        if (piece.toLowerCase() === 'p' && (row === 0 || row === 7)) {\n          newBoard[row][col] = turn === 'white' ? 'Q' : 'q'; // Auto-queen\n        } else {\n          newBoard[row][col] = piece;\n        }\n\n        // Handle en passant capture\n        if (piece.toLowerCase() === 'p' && enPassant && enPassant.row === row && enPassant.col === col) {\n          newBoard[startRow][col] = '';\n          if (turn === 'white') {\n            setBlackTaken([...blackTaken, 'p']);\n          } else {\n            setWhiteTaken([...whiteTaken, 'P']);\n          }\n        }\n\n        // Set en passant opportunities\n        if (piece.toLowerCase() === 'p' && Math.abs(startRow - row) === 2) {\n          setEnPassant({\n            row: (startRow + row) / 2,\n            col\n          });\n        } else {\n          setEnPassant(null);\n        }\n        setBoard(newBoard);\n        setKingMoved({\n          ...kingMoved,\n          [turn]: true\n        });\n\n        // Check if the move results in checkmate\n        const opponent = turn === 'white' ? 'black' : 'white';\n        if (isCheckmate(opponent, newBoard)) {\n          setWinner(turn);\n        } else {\n          setTurn(turn === 'white' ? 'black' : 'white'); // Change turn\n        }\n      }\n      setSelectedPiece(null);\n      setHighlightedMoves([]);\n    } else if (board[row][col] && (turn === 'white' && board[row][col].toUpperCase() === board[row][col] || turn === 'black' && board[row][col].toLowerCase() === board[row][col])) {\n      setSelectedPiece({\n        piece: board[row][col],\n        startRow: row,\n        startCol: col\n      });\n      setHighlightedMoves(getPossibleMoves(board[row][col], row, col));\n    }\n  };\n  const handleDragStart = (e, piece, row, col) => {\n    if (turn === 'white' && piece.toUpperCase() === piece || turn === 'black' && piece.toLowerCase() === piece) {\n      setSelectedPiece({\n        piece,\n        startRow: row,\n        startCol: col\n      });\n      setHighlightedMoves(getPossibleMoves(piece, row, col));\n      e.dataTransfer.setDragImage(new Image(), 0, 0); // Disable default drag image\n    } else {\n      e.preventDefault(); // Prevent drag if it's not the player's turn\n    }\n  };\n  const handleDragOver = (e, row, col) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = \"move\"; // Change cursor to move icon\n  };\n  const handleDrop = (e, row, col) => {\n    e.preventDefault();\n    handleSquareClick(row, col);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [turn === 'white' ? 'White' : 'Black', \"'s Turn\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this), winner && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [winner, \" wins by checkmate!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"taken-pieces\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"white-taken\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"White's Taken Pieces\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: whiteTaken.map((piece, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: pieceImages[piece],\n              alt: piece,\n              className: \"small-piece\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 68\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 50\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"black-taken\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Black's Taken Pieces\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: blackTaken.map((piece, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: pieceImages[piece],\n              alt: piece,\n              className: \"small-piece\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 68\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 50\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessboard\",\n      children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((piece, colIndex) => {\n          const isHighlighted = highlightedMoves.some(move => move.row === rowIndex && move.col === colIndex);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'} ${isHighlighted ? 'highlighted' : ''}`,\n            onClick: () => handleSquareClick(rowIndex, colIndex),\n            onDragOver: e => handleDragOver(e, rowIndex, colIndex),\n            onDrop: e => handleDrop(e, rowIndex, colIndex),\n            children: piece && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: pieceImages[piece],\n              alt: piece,\n              className: `piece ${selectedPiece && selectedPiece.startRow === rowIndex && selectedPiece.startCol === colIndex ? 'dragging' : ''}`,\n              draggable: true,\n              onDragStart: e => handleDragStart(e, piece, rowIndex, colIndex)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 29\n            }, this)\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 17\n          }, this);\n        })\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 291,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"48b+71ZG+JXsVqbvFa7fmDb4g18=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","initialBoardSetup","pieceImages","ChessBoard","_s","board","setBoard","selectedPiece","setSelectedPiece","turn","setTurn","highlightedMoves","setHighlightedMoves","enPassant","setEnPassant","whiteTaken","setWhiteTaken","blackTaken","setBlackTaken","winner","setWinner","kingMoved","setKingMoved","white","black","rookMoved","setRookMoved","queenside","kingside","isPathBlocked","startRow","startCol","endRow","endCol","boardState","dx","dy","x","y","isValidMove","piece","Math","abs","toUpperCase","toLowerCase","row","col","isSquareAttacked","direction","rookCol","rookDestCol","attackerColor","r","c","findKing","king","moveResultsInCheck","tempBoard","map","slice","kingPosition","getPossibleMoves","moves","push","isCheckmate","color","getAllPossibleMoves","length","handleSquareClick","newBoard","rookStartCol","rookEndCol","opponent","handleDragStart","e","dataTransfer","setDragImage","Image","preventDefault","handleDragOver","dropEffect","handleDrop","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","src","alt","rowIndex","colIndex","isHighlighted","some","move","onClick","onDragOver","onDrop","draggable","onDragStart","_c","$RefreshReg$"],"sources":["/Users/shah/Desktop/chessGame/frontend/src/components/ChessBoard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './ChessBoard.css';\n\nconst initialBoardSetup = [\n  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],\n  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\n  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']\n];\n\nconst pieceImages = {\n  'P': '/images/pw.svg', 'R': '/images/rw.svg', 'N': '/images/nw.svg', 'B': '/images/bw.svg', 'Q': '/images/qw.svg', 'K': '/images/kw.svg',\n  'p': '/images/pb.svg', 'r': '/images/rb.svg', 'n': '/images/nb.svg', 'b': '/images/bb.svg', 'q': '/images/qb.svg', 'k': '/images/kb.svg'\n};\n\nconst ChessBoard = () => {\n  const [board, setBoard] = useState(initialBoardSetup);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [turn, setTurn] = useState('white');\n  const [highlightedMoves, setHighlightedMoves] = useState([]);\n  const [enPassant, setEnPassant] = useState(null);\n  const [whiteTaken, setWhiteTaken] = useState([]);\n  const [blackTaken, setBlackTaken] = useState([]);\n  const [winner, setWinner] = useState(null);\n  const [kingMoved, setKingMoved] = useState({ white: false, black: false });\n  const [rookMoved, setRookMoved] = useState({\n    white: { queenside: false, kingside: false },\n    black: { queenside: false, kingside: false }\n  });\n\n  const isPathBlocked = (startRow, startCol, endRow, endCol, boardState) => {\n    const dx = endCol > startCol ? 1 : endCol < startCol ? -1 : 0;\n    const dy = endRow > startRow ? 1 : endRow < startRow ? -1 : 0;\n    let x = startCol + dx;\n    let y = startRow + dy;\n\n    while (x !== endCol || y !== endRow) {\n      if (boardState[y][x] !== '') return true;\n      x += dx;\n      y += dy;\n    }\n\n    return false;\n  };\n\n  const isValidMove = (piece, startRow, startCol, endRow, endCol, boardState) => {\n    const dx = Math.abs(endCol - startCol);\n    const dy = Math.abs(endRow - startRow);\n\n    if (boardState[endRow][endCol] && ((piece.toUpperCase() === piece && boardState[endRow][endCol].toUpperCase() === boardState[endRow][endCol]) ||\n                                      (piece.toLowerCase() === piece && boardState[endRow][endCol].toLowerCase() === boardState[endRow][endCol]))) {\n        return false; // Cannot move to a square occupied by the same color piece\n    }\n\n    switch (piece.toLowerCase()) {\n      case 'p': // Pawn\n        if (piece === 'P') { // White pawn\n          if (startRow === 6 && endRow === 4 && dx === 0 && boardState[endRow][endCol] === '' && boardState[endRow + 1][endCol] === '') { // First move two squares\n            return true;\n          }\n          if (startRow === 3 && endRow === 2 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] === '' && enPassant && enPassant.row === endRow && enPassant.col === endCol) { // En passant\n            return true;\n          }\n          return (dy === -1 && dx === 0 && boardState[endRow][endCol] === '') || // Move forward\n                 (dy === -1 && dx === 1 && boardState[endRow][endCol] !== ''); // Capture\n        } else { // Black pawn\n          if (startRow === 1 && endRow === 3 && dx === 0 && boardState[endRow][endCol] === '' && boardState[endRow - 1][endCol] === '') { // First move two squares\n            return true;\n          }\n          if (startRow === 4 && endRow === 5 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] === '' && enPassant && enPassant.row === endRow && enPassant.col === endCol) { // En passant\n            return true;\n          }\n          return (dy === 1 && dx === 0 && boardState[endRow][endCol] === '') || // Move forward\n                 (dy === 1 && dx === 1 && boardState[endRow][endCol] !== ''); // Capture\n        }\n      case 'r': // Rook\n        return (dx === 0 || Math.abs(dy) === 0) && !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'n': // Knight\n        return dx * Math.abs(dy) === 2;\n      case 'b': // Bishop\n        return dx === Math.abs(dy) && !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'q': // Queen\n        return (dx === 0 || Math.abs(dy) === 0 || dx === Math.abs(dy)) && !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'k': // King\n        if (dx === 2 && dy === 0 && !kingMoved[turn] && !isSquareAttacked(boardState, startRow, startCol, turn)) {\n            // Assuming kingside is to the right and queenside to the left\n            const direction = endCol > startCol ? 1 : -1;\n            const rookCol = direction === 1 ? 7 : 0;\n            const rookDestCol = direction === 1 ? 5 : 3;\n\n            if (boardState[startRow][rookCol].toLowerCase() === 'r' && !rookMoved[turn][direction === 1 ? 'kingside' : 'queenside']) {\n                for (let col = startCol + direction; col !== endCol + direction; col += direction) {\n                    if (boardState[startRow][col] !== '' || isSquareAttacked(boardState, startRow, col, turn)) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        return dx <= 1 && dy === 0 && !isSquareAttacked(boardState, endRow, endCol, turn);\n    default:\n        return false;\n    }\n  };\n\n  const isSquareAttacked = (boardState, row, col, attackerColor) => {\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const piece = boardState[r][c];\n        if (piece && ((attackerColor === 'white' && piece.toUpperCase() === piece) || (attackerColor === 'black' && piece.toLowerCase() === piece))) {\n          if (isValidMove(piece, r, c, row, col, boardState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const findKing = (boardState, king) => {\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (boardState[row][col] === king) {\n          return { row, col };\n        }\n      }\n    }\n    return null;\n  };\n\n  const moveResultsInCheck = (startRow, startCol, endRow, endCol) => {\n    const tempBoard = board.map((r) => r.slice());\n    const piece = tempBoard[startRow][startCol];\n    tempBoard[startRow][startCol] = '';\n    tempBoard[endRow][endCol] = piece;\n\n    const kingPosition = findKing(tempBoard, turn === 'white' ? 'K' : 'k');\n    if (!kingPosition) {\n      return false; // If no king is found, cannot be in check (error case, handled by findKing)\n    }\n    return isSquareAttacked(tempBoard, kingPosition.row, kingPosition.col, turn === 'white' ? 'black' : 'white');\n  };\n\n  const getPossibleMoves = (piece, startRow, startCol) => {\n    const moves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (isValidMove(piece, startRow, startCol, row, col, board) && !moveResultsInCheck(startRow, startCol, row, col)) {\n          moves.push({ row, col });\n        }\n      }\n    }\n\n    // Add castling moves if the piece is a king and hasn't moved\n    if (piece.toLowerCase() === 'k' && !kingMoved[turn]) {\n      // Kingside castling\n      if (!rookMoved[turn].kingside && !isPathBlocked(startRow, startCol, startRow, 7, board)) {\n        if (!isSquareAttacked(board, startRow, startCol, turn) && !isSquareAttacked(board, startRow, startCol + 1, turn) && !isSquareAttacked(board, startRow, startCol + 2, turn)) {\n          moves.push({ row: startRow, col: startCol + 2 });\n        }\n      }\n      // Queenside castling\n      if (!rookMoved[turn].queenside && !isPathBlocked(startRow, startCol, startRow, 0, board)) {\n        if (!isSquareAttacked(board, startRow, startCol, turn) && !isSquareAttacked(board, startRow, startCol - 1, turn) && !isSquareAttacked(board, startRow, startCol - 2, turn)) {\n          moves.push({ row: startRow, col: startCol - 2 });\n        }\n      }\n    }\n\n    return moves;\n  };\n\n  const isCheckmate = (color, boardState) => {\n    const kingPosition = findKing(boardState, color === 'white' ? 'K' : 'k');\n    if (!kingPosition) return false;\n\n    const moves = getAllPossibleMoves(color, boardState);\n    return moves.length === 0 && isSquareAttacked(boardState, kingPosition.row, kingPosition.col, color === 'white' ? 'black' : 'white');\n  };\n\n  const getAllPossibleMoves = (color, boardState) => {\n    const moves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = boardState[row][col];\n        if (piece && ((color === 'white' && piece.toUpperCase() === piece) || (color === 'black' && piece.toLowerCase() === piece))) {\n          moves.push(...getPossibleMoves(piece, row, col));\n        }\n      }\n    }\n    return moves;\n  };\n\n  const handleSquareClick = (row, col) => {\n    if (selectedPiece && !winner) {\n      const { piece, startRow, startCol } = selectedPiece;\n      if (isValidMove(piece, startRow, startCol, row, col, board) && !moveResultsInCheck(startRow, startCol, row, col)) {\n        const newBoard = board.map((r) => r.slice());\n        newBoard[startRow][startCol] = '';\n\n        // Handle castling move specifics\n      if (piece.toLowerCase() === 'k' && Math.abs(startCol - col) === 2) {\n          const kingside = col > startCol;\n          const rookStartCol = kingside ? 7 : 0;\n          const rookEndCol = kingside ? 5 : 3;\n          newBoard[startRow][rookEndCol] = newBoard[startRow][rookStartCol];\n          newBoard[startRow][rookStartCol] = '';\n          setRookMoved({\n              ...rookMoved,\n              [turn]: { ...rookMoved[turn], [kingside ? 'kingside' : 'queenside']: true }\n          });\n      }\n\n        // Track taken pieces\n        if (board[row][col]) {\n          if (turn === 'white') {\n            setBlackTaken([...blackTaken, board[row][col]]);\n          } else {\n            setWhiteTaken([...whiteTaken, board[row][col]]);\n          }\n        }\n\n        // Auto-queen for pawns\n        if (piece.toLowerCase() === 'p' && (row === 0 || row === 7)) {\n          newBoard[row][col] = turn === 'white' ? 'Q' : 'q'; // Auto-queen\n        } else {\n          newBoard[row][col] = piece;\n        }\n\n        // Handle en passant capture\n        if (piece.toLowerCase() === 'p' && enPassant && enPassant.row === row && enPassant.col === col) {\n          newBoard[startRow][col] = '';\n          if (turn === 'white') {\n            setBlackTaken([...blackTaken, 'p']);\n          } else {\n            setWhiteTaken([...whiteTaken, 'P']);\n          }\n        }\n\n        // Set en passant opportunities\n        if (piece.toLowerCase() === 'p' && Math.abs(startRow - row) === 2) {\n          setEnPassant({ row: (startRow + row) / 2, col });\n        } else {\n          setEnPassant(null);\n        }\n\n        setBoard(newBoard);\n        setKingMoved({ ...kingMoved, [turn]: true });\n\n        // Check if the move results in checkmate\n        const opponent = turn === 'white' ? 'black' : 'white';\n        if (isCheckmate(opponent, newBoard)) {\n          setWinner(turn);\n        } else {\n          setTurn(turn === 'white' ? 'black' : 'white'); // Change turn\n        }\n      }\n      setSelectedPiece(null);\n      setHighlightedMoves([]);\n    } else if (board[row][col] && ((turn === 'white' && board[row][col].toUpperCase() === board[row][col]) || (turn === 'black' && board[row][col].toLowerCase() === board[row][col]))) {\n      setSelectedPiece({ piece: board[row][col], startRow: row, startCol: col });\n      setHighlightedMoves(getPossibleMoves(board[row][col], row, col));\n    }\n  };\n\n  const handleDragStart = (e, piece, row, col) => {\n    if ((turn === 'white' && piece.toUpperCase() === piece) || (turn === 'black' && piece.toLowerCase() === piece)) {\n      setSelectedPiece({ piece, startRow: row, startCol: col });\n      setHighlightedMoves(getPossibleMoves(piece, row, col));\n      e.dataTransfer.setDragImage(new Image(), 0, 0); // Disable default drag image\n    } else {\n      e.preventDefault(); // Prevent drag if it's not the player's turn\n    }\n  };\n\n  const handleDragOver = (e, row, col) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = \"move\"; // Change cursor to move icon\n  };\n\n  const handleDrop = (e, row, col) => {\n    e.preventDefault();\n    handleSquareClick(row, col);\n  };\n\n  return (\n    <div className=\"game-container\">\n      <h2>{turn === 'white' ? 'White' : 'Black'}'s Turn</h2>\n      {winner && <h3>{winner} wins by checkmate!</h3>}\n      <div className=\"taken-pieces\">\n        <div className=\"white-taken\">\n          <h3>White's Taken Pieces</h3>\n          <div>{whiteTaken.map((piece, index) => <span key={index}><img src={pieceImages[piece]} alt={piece} className=\"small-piece\" /></span>)}</div>\n        </div>\n        <div className=\"black-taken\">\n          <h3>Black's Taken Pieces</h3>\n          <div>{blackTaken.map((piece, index) => <span key={index}><img src={pieceImages[piece]} alt={piece} className=\"small-piece\" /></span>)}</div>\n        </div>\n      </div>\n      <div className=\"chessboard\">\n        {board.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"row\">\n            {row.map((piece, colIndex) => {\n              const isHighlighted = highlightedMoves.some(move => move.row === rowIndex && move.col === colIndex);\n              return (\n                <div\n                  key={colIndex}\n                  className={`square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'} ${isHighlighted ? 'highlighted' : ''}`}\n                  onClick={() => handleSquareClick(rowIndex, colIndex)}\n                  onDragOver={(e) => handleDragOver(e, rowIndex, colIndex)}\n                  onDrop={(e) => handleDrop(e, rowIndex, colIndex)}\n                >\n                  {piece && <img\n                    src={pieceImages[piece]}\n                    alt={piece}\n                    className={`piece ${selectedPiece && selectedPiece.startRow === rowIndex && selectedPiece.startCol === colIndex ? 'dragging' : ''}`}\n                    draggable\n                    onDragStart={(e) => handleDragStart(e, piece, rowIndex, colIndex)}\n                  />}\n                </div>\n              );\n            })}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ChessBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}