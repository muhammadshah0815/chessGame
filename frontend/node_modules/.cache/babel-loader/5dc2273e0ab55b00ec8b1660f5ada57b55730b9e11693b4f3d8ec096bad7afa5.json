{"ast":null,"code":"var _jsxFileName = \"/Users/shah/Desktop/chessGame/frontend/src/components/ChessBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './ChessBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialBoardSetup = [['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'], ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'], ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']];\nconst pieceMap = {\n  'P': '♙',\n  'R': '♖',\n  'N': '♘',\n  'B': '♗',\n  'Q': '♕',\n  'K': '♔',\n  'p': '♟',\n  'r': '♜',\n  'n': '♞',\n  'b': '♝',\n  'q': '♛',\n  'k': '♚'\n};\nconst ChessBoard = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoardSetup);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [turn, setTurn] = useState('white'); // Track whose turn it is\n  const [highlightedMoves, setHighlightedMoves] = useState([]);\n  const [enPassant, setEnPassant] = useState(null); // Track en passant opportunities\n  const [whiteTaken, setWhiteTaken] = useState([]);\n  const [blackTaken, setBlackTaken] = useState([]);\n  const isValidMove = (piece, startRow, startCol, endRow, endCol, boardState) => {\n    const dx = Math.abs(endCol - startCol);\n    const dy = endRow - startRow;\n    if (boardState[endRow][endCol] && (piece.toUpperCase() === piece && boardState[endRow][endCol].toUpperCase() === boardState[endRow][endCol] || piece.toLowerCase() === piece && boardState[endRow][endCol].toLowerCase() === boardState[endRow][endCol])) {\n      return false; // Cannot move to a square occupied by the same color piece\n    }\n    switch (piece.toLowerCase()) {\n      case 'p':\n        // Pawn\n        if (piece === 'P') {\n          // White pawn\n          if (startRow === 6 && endRow === 4 && dx === 0 && boardState[endRow][endCol] === '' && boardState[endRow + 1][endCol] === '') {\n            // First move two squares\n            return true;\n          }\n          if (startRow === 3 && endRow === 2 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] === '' && enPassant && enPassant.row === endRow && enPassant.col === endCol) {\n            // En passant\n            return true;\n          }\n          return dy === -1 && dx === 0 && boardState[endRow][endCol] === '' ||\n          // Move forward\n          dy === -1 && dx === 1 && boardState[endRow][endCol] !== ''; // Capture\n        } else {\n          // Black pawn\n          if (startRow === 1 && endRow === 3 && dx === 0 && boardState[endRow][endCol] === '' && boardState[endRow - 1][endCol] === '') {\n            // First move two squares\n            return true;\n          }\n          if (startRow === 4 && endRow === 5 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] === '' && enPassant && enPassant.row === endRow && enPassant.col === endCol) {\n            // En passant\n            return true;\n          }\n          return dy === 1 && dx === 0 && boardState[endRow][endCol] === '' ||\n          // Move forward\n          dy === 1 && dx === 1 && boardState[endRow][endCol] !== ''; // Capture\n        }\n      case 'r':\n        // Rook\n        return (dx === 0 || Math.abs(dy) === 0) && !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'n':\n        // Knight\n        return dx * Math.abs(dy) === 2;\n      case 'b':\n        // Bishop\n        return dx === Math.abs(dy) && !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'q':\n        // Queen\n        return (dx === 0 || Math.abs(dy) === 0 || dx === Math.abs(dy)) && !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'k':\n        // King\n        return dx <= 1 && Math.abs(dy) <= 1;\n      default:\n        return false;\n    }\n  };\n  const isPathBlocked = (startRow, startCol, endRow, endCol, boardState) => {\n    const dx = endCol > startCol ? 1 : endCol < startCol ? -1 : 0;\n    const dy = endRow > startRow ? 1 : endRow < startRow ? -1 : 0;\n    let x = startCol + dx;\n    let y = startRow + dy;\n    while (x !== endCol || y !== endRow) {\n      if (boardState[y][x] !== '') return true;\n      x += dx;\n      y += dy;\n    }\n    return false;\n  };\n  const getPossibleMoves = (piece, startRow, startCol) => {\n    const moves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (isValidMove(piece, startRow, startCol, row, col, board) && !moveResultsInCheck(startRow, startCol, row, col)) {\n          moves.push({\n            row,\n            col\n          });\n        }\n      }\n    }\n    return moves;\n  };\n  const moveResultsInCheck = (startRow, startCol, endRow, endCol) => {\n    const tempBoard = board.map(r => r.slice());\n    const piece = tempBoard[startRow][startCol];\n    tempBoard[startRow][startCol] = '';\n    tempBoard[endRow][endCol] = piece;\n    const kingPosition = findKing(tempBoard, turn === 'white' ? 'K' : 'k');\n    return isSquareAttacked(tempBoard, kingPosition.row, kingPosition.col, turn === 'white' ? 'black' : 'white');\n  };\n  const findKing = (tempBoard, king) => {\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoard[row][col] === king) {\n          return {\n            row,\n            col\n          };\n        }\n      }\n    }\n    return null;\n  };\n  const isSquareAttacked = (tempBoard, row, col, attackerColor) => {\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const piece = tempBoard[r][c];\n        if (piece && (attackerColor === 'white' && piece.toUpperCase() === piece || attackerColor === 'black' && piece.toLowerCase() === piece)) {\n          if (isValidMove(piece, r, c, row, col, tempBoard)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n  const handleSquareClick = (row, col) => {\n    if (selectedPiece) {\n      const {\n        piece,\n        startRow,\n        startCol\n      } = selectedPiece;\n      if (isValidMove(piece, startRow, startCol, row, col, board) && !moveResultsInCheck(startRow, startCol, row, col)) {\n        const newBoard = board.map(r => r.slice());\n        newBoard[startRow][startCol] = '';\n\n        // Track taken pieces\n        if (board[row][col]) {\n          if (turn === 'white') {\n            setBlackTaken([...blackTaken, board[row][col]]);\n          } else {\n            setWhiteTaken([...whiteTaken, board[row][col]]);\n          }\n        }\n        newBoard[row][col] = piece;\n\n        // Handle en passant capture\n        if (piece.toLowerCase() === 'p' && enPassant && enPassant.row === row && enPassant.col === col) {\n          newBoard[startRow][col] = '';\n          if (turn === 'white') {\n            setBlackTaken([...blackTaken, 'p']);\n          } else {\n            setWhiteTaken([...whiteTaken, 'P']);\n          }\n        }\n\n        // Set en passant opportunities\n        if (piece.toLowerCase() === 'p' && Math.abs(startRow - row) === 2) {\n          setEnPassant({\n            row: (startRow + row) / 2,\n            col\n          });\n        } else {\n          setEnPassant(null);\n        }\n        setBoard(newBoard);\n        setTurn(turn === 'white' ? 'black' : 'white'); // Change turn\n      }\n      setSelectedPiece(null);\n      setHighlightedMoves([]);\n    } else if (board[row][col] && (turn === 'white' && board[row][col].toUpperCase() === board[row][col] || turn === 'black' && board[row][col].toLowerCase() === board[row][col])) {\n      setSelectedPiece({\n        piece: board[row][col],\n        startRow: row,\n        startCol: col\n      });\n      setHighlightedMoves(getPossibleMoves(board[row][col], row, col));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [turn === 'white' ? 'White' : 'Black', \"'s Turn\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"taken-pieces\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"white-taken\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"White's Taken Pieces\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: whiteTaken.map((piece, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n            children: pieceMap[piece]\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 50\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"black-taken\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Black's Taken Pieces\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: blackTaken.map((piece, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n            children: pieceMap[piece]\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 50\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessboard\",\n      children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((piece, colIndex) => {\n          const isHighlighted = highlightedMoves.some(move => move.row === rowIndex && move.col === colIndex);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'} ${isHighlighted ? 'highlighted' : ''}`,\n            onClick: () => handleSquareClick(rowIndex, colIndex),\n            children: piece && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `piece ${piece.toUpperCase() === piece ? 'white-piece' : 'black-piece'}`,\n              children: pieceMap[piece]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 29\n            }, this)\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 17\n          }, this);\n        })\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"CLnteCNn59M2rn5Y/udZtG2XjBI=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","initialBoardSetup","pieceMap","ChessBoard","_s","board","setBoard","selectedPiece","setSelectedPiece","turn","setTurn","highlightedMoves","setHighlightedMoves","enPassant","setEnPassant","whiteTaken","setWhiteTaken","blackTaken","setBlackTaken","isValidMove","piece","startRow","startCol","endRow","endCol","boardState","dx","Math","abs","dy","toUpperCase","toLowerCase","row","col","isPathBlocked","x","y","getPossibleMoves","moves","moveResultsInCheck","push","tempBoard","map","r","slice","kingPosition","findKing","isSquareAttacked","king","attackerColor","c","handleSquareClick","newBoard","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","rowIndex","colIndex","isHighlighted","some","move","onClick","_c","$RefreshReg$"],"sources":["/Users/shah/Desktop/chessGame/frontend/src/components/ChessBoard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './ChessBoard.css';\n\nconst initialBoardSetup = [\n  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],\n  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\n  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']\n];\n\nconst pieceMap = {\n  'P': '♙', 'R': '♖', 'N': '♘', 'B': '♗', 'Q': '♕', 'K': '♔',\n  'p': '♟', 'r': '♜', 'n': '♞', 'b': '♝', 'q': '♛', 'k': '♚'\n};\n\nconst ChessBoard = () => {\n  const [board, setBoard] = useState(initialBoardSetup);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [turn, setTurn] = useState('white'); // Track whose turn it is\n  const [highlightedMoves, setHighlightedMoves] = useState([]);\n  const [enPassant, setEnPassant] = useState(null); // Track en passant opportunities\n  const [whiteTaken, setWhiteTaken] = useState([]);\n  const [blackTaken, setBlackTaken] = useState([]);\n\n  const isValidMove = (piece, startRow, startCol, endRow, endCol, boardState) => {\n    const dx = Math.abs(endCol - startCol);\n    const dy = endRow - startRow;\n\n    if (boardState[endRow][endCol] && ((piece.toUpperCase() === piece && boardState[endRow][endCol].toUpperCase() === boardState[endRow][endCol]) || \n                                  (piece.toLowerCase() === piece && boardState[endRow][endCol].toLowerCase() === boardState[endRow][endCol]))) {\n      return false; // Cannot move to a square occupied by the same color piece\n    }\n\n    switch (piece.toLowerCase()) {\n      case 'p': // Pawn\n        if (piece === 'P') { // White pawn\n          if (startRow === 6 && endRow === 4 && dx === 0 && boardState[endRow][endCol] === '' && boardState[endRow + 1][endCol] === '') { // First move two squares\n            return true;\n          }\n          if (startRow === 3 && endRow === 2 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] === '' && enPassant && enPassant.row === endRow && enPassant.col === endCol) { // En passant\n            return true;\n          }\n          return (dy === -1 && dx === 0 && boardState[endRow][endCol] === '') || // Move forward\n                 (dy === -1 && dx === 1 && boardState[endRow][endCol] !== ''); // Capture\n        } else { // Black pawn\n          if (startRow === 1 && endRow === 3 && dx === 0 && boardState[endRow][endCol] === '' && boardState[endRow - 1][endCol] === '') { // First move two squares\n            return true;\n          }\n          if (startRow === 4 && endRow === 5 && Math.abs(startCol - endCol) === 1 && boardState[endRow][endCol] === '' && enPassant && enPassant.row === endRow && enPassant.col === endCol) { // En passant\n            return true;\n          }\n          return (dy === 1 && dx === 0 && boardState[endRow][endCol] === '') || // Move forward\n                 (dy === 1 && dx === 1 && boardState[endRow][endCol] !== ''); // Capture\n        }\n      case 'r': // Rook\n        return (dx === 0 || Math.abs(dy) === 0) && !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'n': // Knight\n        return dx * Math.abs(dy) === 2;\n      case 'b': // Bishop\n        return dx === Math.abs(dy) && !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'q': // Queen\n        return (dx === 0 || Math.abs(dy) === 0 || dx === Math.abs(dy)) && !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'k': // King\n        return dx <= 1 && Math.abs(dy) <= 1;\n      default:\n        return false;\n    }\n  };\n\n  const isPathBlocked = (startRow, startCol, endRow, endCol, boardState) => {\n    const dx = endCol > startCol ? 1 : endCol < startCol ? -1 : 0;\n    const dy = endRow > startRow ? 1 : endRow < startRow ? -1 : 0;\n    let x = startCol + dx;\n    let y = startRow + dy;\n\n    while (x !== endCol || y !== endRow) {\n      if (boardState[y][x] !== '') return true;\n      x += dx;\n      y += dy;\n    }\n\n    return false;\n  };\n\n  const getPossibleMoves = (piece, startRow, startCol) => {\n    const moves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (isValidMove(piece, startRow, startCol, row, col, board) && !moveResultsInCheck(startRow, startCol, row, col)) {\n          moves.push({ row, col });\n        }\n      }\n    }\n    return moves;\n  };\n\n  const moveResultsInCheck = (startRow, startCol, endRow, endCol) => {\n    const tempBoard = board.map((r) => r.slice());\n    const piece = tempBoard[startRow][startCol];\n    tempBoard[startRow][startCol] = '';\n    tempBoard[endRow][endCol] = piece;\n\n    const kingPosition = findKing(tempBoard, turn === 'white' ? 'K' : 'k');\n    return isSquareAttacked(tempBoard, kingPosition.row, kingPosition.col, turn === 'white' ? 'black' : 'white');\n  };\n\n  const findKing = (tempBoard, king) => {\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (tempBoard[row][col] === king) {\n          return { row, col };\n        }\n      }\n    }\n    return null;\n  };\n\n  const isSquareAttacked = (tempBoard, row, col, attackerColor) => {\n    for (let r = 0; r < 8; r++) {\n      for (let c = 0; c < 8; c++) {\n        const piece = tempBoard[r][c];\n        if (piece && ((attackerColor === 'white' && piece.toUpperCase() === piece) || (attackerColor === 'black' && piece.toLowerCase() === piece))) {\n          if (isValidMove(piece, r, c, row, col, tempBoard)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const handleSquareClick = (row, col) => {\n    if (selectedPiece) {\n      const { piece, startRow, startCol } = selectedPiece;\n      if (isValidMove(piece, startRow, startCol, row, col, board) && !moveResultsInCheck(startRow, startCol, row, col)) {\n        const newBoard = board.map((r) => r.slice());\n        newBoard[startRow][startCol] = '';\n        \n        // Track taken pieces\n        if (board[row][col]) {\n          if (turn === 'white') {\n            setBlackTaken([...blackTaken, board[row][col]]);\n          } else {\n            setWhiteTaken([...whiteTaken, board[row][col]]);\n          }\n        }\n\n        newBoard[row][col] = piece;\n\n        // Handle en passant capture\n        if (piece.toLowerCase() === 'p' && enPassant && enPassant.row === row && enPassant.col === col) {\n          newBoard[startRow][col] = '';\n          if (turn === 'white') {\n            setBlackTaken([...blackTaken, 'p']);\n          } else {\n            setWhiteTaken([...whiteTaken, 'P']);\n          }\n        }\n\n        // Set en passant opportunities\n        if (piece.toLowerCase() === 'p' && Math.abs(startRow - row) === 2) {\n          setEnPassant({ row: (startRow + row) / 2, col });\n        } else {\n          setEnPassant(null);\n        }\n\n        setBoard(newBoard);\n        setTurn(turn === 'white' ? 'black' : 'white'); // Change turn\n      }\n      setSelectedPiece(null);\n      setHighlightedMoves([]);\n    } else if (board[row][col] && ((turn === 'white' && board[row][col].toUpperCase() === board[row][col]) || (turn === 'black' && board[row][col].toLowerCase() === board[row][col]))) {\n      setSelectedPiece({ piece: board[row][col], startRow: row, startCol: col });\n      setHighlightedMoves(getPossibleMoves(board[row][col], row, col));\n    }\n  };\n\n  return (\n    <div className=\"game-container\">\n      <h2>{turn === 'white' ? 'White' : 'Black'}'s Turn</h2>\n      <div className=\"taken-pieces\">\n        <div className=\"white-taken\">\n          <h3>White's Taken Pieces</h3>\n          <div>{whiteTaken.map((piece, index) => <span key={index}>{pieceMap[piece]}</span>)}</div>\n        </div>\n        <div className=\"black-taken\">\n          <h3>Black's Taken Pieces</h3>\n          <div>{blackTaken.map((piece, index) => <span key={index}>{pieceMap[piece]}</span>)}</div>\n        </div>\n      </div>\n      <div className=\"chessboard\">\n        {board.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"row\">\n            {row.map((piece, colIndex) => {\n              const isHighlighted = highlightedMoves.some(move => move.row === rowIndex && move.col === colIndex);\n              return (\n                <div\n                  key={colIndex}\n                  className={`square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'} ${isHighlighted ? 'highlighted' : ''}`}\n                  onClick={() => handleSquareClick(rowIndex, colIndex)}\n                >\n                  {piece && <span className={`piece ${piece.toUpperCase() === piece ? 'white-piece' : 'black-piece'}`}>{pieceMap[piece]}</span>}\n                </div>\n              );\n            })}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ChessBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}