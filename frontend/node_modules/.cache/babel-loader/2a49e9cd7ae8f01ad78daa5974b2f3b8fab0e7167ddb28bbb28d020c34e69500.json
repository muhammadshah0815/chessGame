{"ast":null,"code":"var _jsxFileName = \"/Users/shah/Desktop/chessGame/frontend/src/components/ChessBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './ChessBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialBoardSetup = [['r', '♙', 'b', 'q', 'k', 'b', 'n', 'r'], ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'], ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']];\nconst ChessBoard = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoardSetup);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [turn, setTurn] = useState('white'); // Track whose turn it is\n\n  const isValidMove = (piece, startRow, startCol, endRow, endCol) => {\n    // Basic move validation for each piece\n    const dx = Math.abs(endCol - startCol);\n    const dy = Math.abs(endRow - startRow);\n    switch (piece.toLowerCase()) {\n      case 'p':\n        // Pawn\n        return startRow - endRow === 1 && dx === 0 ||\n        // Move forward\n        startRow - endRow === 1 && dx === 1 && board[endRow][endCol] !== '';\n      // Capture\n      case 'r':\n        // Rook\n        return (dx === 0 || dy === 0) && !isPathBlocked(startRow, startCol, endRow, endCol);\n      case 'n':\n        // Knight\n        return dx * dy === 2;\n      case 'b':\n        // Bishop\n        return dx === dy && !isPathBlocked(startRow, startCol, endRow, endCol);\n      case 'q':\n        // Queen\n        return (dx === 0 || dy === 0 || dx === dy) && !isPathBlocked(startRow, startCol, endRow, endCol);\n      case 'k':\n        // King\n        return dx <= 1 && dy <= 1;\n      default:\n        return false;\n    }\n  };\n  const isPathBlocked = (startRow, startCol, endRow, endCol) => {\n    const dx = endCol > startCol ? 1 : endCol < startCol ? -1 : 0;\n    const dy = endRow > startRow ? 1 : endRow < startRow ? -1 : 0;\n    let x = startCol + dx;\n    let y = startRow + dy;\n    while (x !== endCol || y !== endRow) {\n      if (board[y][x] !== '') return true;\n      x += dx;\n      y += dy;\n    }\n    return false;\n  };\n  const handleSquareClick = (row, col) => {\n    if (selectedPiece) {\n      const {\n        piece,\n        startRow,\n        startCol\n      } = selectedPiece;\n      if (isValidMove(piece, startRow, startCol, row, col)) {\n        const newBoard = board.map(r => r.slice());\n        newBoard[startRow][startCol] = '';\n        newBoard[row][col] = piece;\n        setBoard(newBoard);\n        setTurn(turn === 'white' ? 'black' : 'white'); // Change turn\n      }\n      setSelectedPiece(null);\n    } else if (board[row][col] && (turn === 'white' && board[row][col].toUpperCase() === board[row][col] || turn === 'black' && board[row][col].toLowerCase() === board[row][col])) {\n      setSelectedPiece({\n        piece: board[row][col],\n        startRow: row,\n        startCol: col\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [turn === 'white' ? 'White' : 'Black', \"'s Turn\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessboard\",\n      children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((piece, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'}`,\n          onClick: () => handleSquareClick(rowIndex, colIndex),\n          children: piece && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `piece ${piece.toUpperCase() === piece ? 'white-piece' : 'black-piece'}`,\n            children: piece\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 27\n          }, this)\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"S9sHprizuyRV8R9SfmZ0CYPzLP8=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","initialBoardSetup","ChessBoard","_s","board","setBoard","selectedPiece","setSelectedPiece","turn","setTurn","isValidMove","piece","startRow","startCol","endRow","endCol","dx","Math","abs","dy","toLowerCase","isPathBlocked","x","y","handleSquareClick","row","col","newBoard","map","r","slice","toUpperCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rowIndex","colIndex","onClick","_c","$RefreshReg$"],"sources":["/Users/shah/Desktop/chessGame/frontend/src/components/ChessBoard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './ChessBoard.css';\n\nconst initialBoardSetup = [\n  ['r', '♙', 'b', 'q', 'k', 'b', 'n', 'r'],\n  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\n  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']\n];\n\nconst ChessBoard = () => {\n  const [board, setBoard] = useState(initialBoardSetup);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [turn, setTurn] = useState('white'); // Track whose turn it is\n\n  const isValidMove = (piece, startRow, startCol, endRow, endCol) => {\n    // Basic move validation for each piece\n    const dx = Math.abs(endCol - startCol);\n    const dy = Math.abs(endRow - startRow);\n\n    switch (piece.toLowerCase()) {\n      case 'p': // Pawn\n        return (startRow - endRow === 1 && dx === 0) || // Move forward\n               (startRow - endRow === 1 && dx === 1 && board[endRow][endCol] !== ''); // Capture\n      case 'r': // Rook\n        return (dx === 0 || dy === 0) && !isPathBlocked(startRow, startCol, endRow, endCol);\n      case 'n': // Knight\n        return dx * dy === 2;\n      case 'b': // Bishop\n        return dx === dy && !isPathBlocked(startRow, startCol, endRow, endCol);\n      case 'q': // Queen\n        return (dx === 0 || dy === 0 || dx === dy) && !isPathBlocked(startRow, startCol, endRow, endCol);\n      case 'k': // King\n        return dx <= 1 && dy <= 1;\n      default:\n        return false;\n    }\n  };\n\n  const isPathBlocked = (startRow, startCol, endRow, endCol) => {\n    const dx = endCol > startCol ? 1 : endCol < startCol ? -1 : 0;\n    const dy = endRow > startRow ? 1 : endRow < startRow ? -1 : 0;\n    let x = startCol + dx;\n    let y = startRow + dy;\n\n    while (x !== endCol || y !== endRow) {\n      if (board[y][x] !== '') return true;\n      x += dx;\n      y += dy;\n    }\n\n    return false;\n  };\n\n  const handleSquareClick = (row, col) => {\n    if (selectedPiece) {\n      const { piece, startRow, startCol } = selectedPiece;\n      if (isValidMove(piece, startRow, startCol, row, col)) {\n        const newBoard = board.map((r) => r.slice());\n        newBoard[startRow][startCol] = '';\n        newBoard[row][col] = piece;\n        setBoard(newBoard);\n        setTurn(turn === 'white' ? 'black' : 'white'); // Change turn\n      }\n      setSelectedPiece(null);\n    } else if (board[row][col] && ((turn === 'white' && board[row][col].toUpperCase() === board[row][col]) || (turn === 'black' && board[row][col].toLowerCase() === board[row][col]))) {\n      setSelectedPiece({ piece: board[row][col], startRow: row, startCol: col });\n    }\n  };\n\n  return (\n    <div className=\"game-container\">\n      <h2>{turn === 'white' ? 'White' : 'Black'}'s Turn</h2>\n      <div className=\"chessboard\">\n        {board.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"row\">\n            {row.map((piece, colIndex) => (\n              <div\n                key={colIndex}\n                className={`square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'}`}\n                onClick={() => handleSquareClick(rowIndex, colIndex)}\n              >\n                {piece && <span className={`piece ${piece.toUpperCase() === piece ? 'white-piece' : 'black-piece'}`}>{piece}</span>}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ChessBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}