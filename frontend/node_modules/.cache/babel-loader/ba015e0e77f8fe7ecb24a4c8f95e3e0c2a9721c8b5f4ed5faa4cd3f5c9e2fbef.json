{"ast":null,"code":"var _jsxFileName = \"/Users/shah/Desktop/chessGame/frontend/src/components/ChessBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './ChessBoard.css';\nimport bb from '../public/images/bb.svg';\nimport bw from '../public/images/bw.svg';\nimport kb from '../public/images/kb.svg';\nimport kw from '../public/images/kw.svg';\nimport nb from '../public/images/nb.svg';\nimport nw from '../public/images/nw.svg';\nimport pb from '../public/images/pb.svg';\nimport pw from '../public/images/pw.svg';\nimport qb from '../public/images/qb.svg';\nimport qw from '../public/images/qw.svg';\nimport rb from '../public/images/rb.svg';\nimport rw from '../public/images/rw.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pieceImages = {\n  'P': pw,\n  'R': rw,\n  'N': nw,\n  'B': bw,\n  'Q': qw,\n  'K': kw,\n  'p': pb,\n  'r': rb,\n  'n': nb,\n  'b': bb,\n  'q': qb,\n  'k': kb\n};\nconst initialBoard = [['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'], ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'], ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']];\nconst ChessBoard = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoard);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [highlightedMoves, setHighlightedMoves] = useState([]);\n  const [turn, setTurn] = useState('white');\n  const [winner, setWinner] = useState(null);\n  const [whiteTaken, setWhiteTaken] = useState([]);\n  const [blackTaken, setBlackTaken] = useState([]);\n  const [enPassant, setEnPassant] = useState(null);\n  const dragImageRef = useRef(null);\n  const pieceRefs = useRef(board.map(row => row.map(() => /*#__PURE__*/React.createRef())));\n  const getPossibleMoves = (piece, row, col) => {\n    // ... (same as your original getPossibleMoves function)\n  };\n  const handleSquareClick = (row, col) => {\n    if (winner) return;\n    if (selectedPiece) {\n      const validMove = highlightedMoves.some(move => move.row === row && move.col === col);\n      if (validMove) {\n        const newBoard = board.map(arr => arr.slice());\n        const {\n          piece,\n          startRow,\n          startCol\n        } = selectedPiece;\n\n        // Handle en passant\n        if (piece.toLowerCase() === 'p' && col !== startCol && !board[row][col]) {\n          if (turn === 'white') {\n            newBoard[row + 1][col] = '';\n            setBlackTaken([...blackTaken, 'p']);\n          } else {\n            newBoard[row - 1][col] = '';\n            setWhiteTaken([...whiteTaken, 'P']);\n          }\n        }\n        if (newBoard[row][col]) {\n          if (turn === 'white') {\n            setWhiteTaken([...whiteTaken, newBoard[row][col]]);\n          } else {\n            setBlackTaken([...blackTaken, newBoard[row][col]]);\n          }\n        }\n        newBoard[startRow][startCol] = '';\n        newBoard[row][col] = piece;\n        if (piece.toLowerCase() === 'p' && Math.abs(startRow - row) === 2) {\n          setEnPassant({\n            row: (startRow + row) / 2,\n            col\n          });\n        } else {\n          setEnPassant(null);\n        }\n        setBoard(newBoard);\n        const opponent = turn === 'white' ? 'black' : 'white';\n        if (isCheckmate(opponent, newBoard)) {\n          setWinner(turn);\n        } else {\n          setTurn(turn === 'white' ? 'black' : 'white');\n        }\n      }\n      setSelectedPiece(null);\n      setHighlightedMoves([]);\n    } else if (board[row][col] && (turn === 'white' && board[row][col].toUpperCase() === board[row][col] || turn === 'black' && board[row][col].toLowerCase() === board[row][col])) {\n      setSelectedPiece({\n        piece: board[row][col],\n        startRow: row,\n        startCol: col\n      });\n      setHighlightedMoves(getPossibleMoves(board[row][col], row, col));\n    }\n  };\n  const handleDragStart = (e, piece, row, col) => {\n    if (turn === 'white' && piece.toUpperCase() === piece || turn === 'black' && piece.toLowerCase() === piece) {\n      setSelectedPiece({\n        piece,\n        startRow: row,\n        startCol: col\n      });\n      setHighlightedMoves(getPossibleMoves(piece, row, col));\n      e.dataTransfer.effectAllowed = \"move\";\n      const img = e.target.cloneNode(true);\n      img.style.position = \"absolute\";\n      img.style.opacity = \"1\";\n      img.style.pointerEvents = \"none\";\n      img.style.zIndex = \"1000\";\n      document.body.appendChild(img);\n      dragImageRef.current = img;\n      e.dataTransfer.setDragImage(img, img.clientWidth / 2, img.clientHeight / 2);\n    } else {\n      e.preventDefault();\n    }\n  };\n  const handleDragEnd = () => {\n    if (dragImageRef.current) {\n      document.body.removeChild(dragImageRef.current);\n      dragImageRef.current = null;\n    }\n  };\n  const handleDragOver = (e, row, col) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = \"move\";\n  };\n  const handleDrop = (e, row, col) => {\n    e.preventDefault();\n    handleSquareClick(row, col);\n  };\n  const isCheckmate = (color, boardState) => {\n    const kingPosition = findKing(boardState, color === 'white' ? 'K' : 'k');\n    if (!kingPosition) return false;\n    const moves = getAllPossibleMoves(color, boardState);\n    return moves.length === 0 && isSquareAttacked(boardState, kingPosition.row, kingPosition.col, color === 'white' ? 'black' : 'white');\n  };\n  const getAllPossibleMoves = (color, boardState) => {\n    const moves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = boardState[row][col];\n        if (piece && (color === 'white' && piece.toUpperCase() === piece || color === 'black' && piece.toLowerCase() === piece)) {\n          moves.push(...getPossibleMoves(piece, row, col, boardState));\n        }\n      }\n    }\n    return moves;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [turn === 'white' ? 'White' : 'Black', \"'s Turn\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), winner && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [winner, \" wins by checkmate!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"taken-pieces\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"white-taken\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"White's Taken Pieces\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: whiteTaken.map((piece, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: pieceImages[piece],\n              alt: piece,\n              className: \"small-piece\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 68\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 50\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"black-taken\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Black's Taken Pieces\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: blackTaken.map((piece, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: pieceImages[piece],\n              alt: piece,\n              className: \"small-piece\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 68\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 50\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessboard\",\n      children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((piece, colIndex) => {\n          const isHighlighted = highlightedMoves.some(move => move.row === rowIndex && move.col === colIndex);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'} ${isHighlighted ? 'highlighted' : ''}`,\n            onClick: () => handleSquareClick(rowIndex, colIndex),\n            onDragOver: e => handleDragOver(e, rowIndex, colIndex),\n            onDrop: e => handleDrop(e, rowIndex, colIndex),\n            children: piece && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: pieceImages[piece],\n              alt: piece,\n              className: \"piece\",\n              draggable: true,\n              onDragStart: e => handleDragStart(e, piece, rowIndex, colIndex),\n              onDragEnd: handleDragEnd,\n              ref: pieceRefs.current[rowIndex][colIndex]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 21\n            }, this)\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 17\n          }, this);\n        })\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"ajqR8I9xlJRG9o4Igu5VPAbyR/E=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","useRef","useEffect","bb","bw","kb","kw","nb","nw","pb","pw","qb","qw","rb","rw","jsxDEV","_jsxDEV","pieceImages","initialBoard","ChessBoard","_s","board","setBoard","selectedPiece","setSelectedPiece","highlightedMoves","setHighlightedMoves","turn","setTurn","winner","setWinner","whiteTaken","setWhiteTaken","blackTaken","setBlackTaken","enPassant","setEnPassant","dragImageRef","pieceRefs","map","row","createRef","getPossibleMoves","piece","col","handleSquareClick","validMove","some","move","newBoard","arr","slice","startRow","startCol","toLowerCase","Math","abs","opponent","isCheckmate","toUpperCase","handleDragStart","e","dataTransfer","effectAllowed","img","target","cloneNode","style","position","opacity","pointerEvents","zIndex","document","body","appendChild","current","setDragImage","clientWidth","clientHeight","preventDefault","handleDragEnd","removeChild","handleDragOver","dropEffect","handleDrop","color","boardState","kingPosition","findKing","moves","getAllPossibleMoves","length","isSquareAttacked","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","src","alt","rowIndex","colIndex","isHighlighted","onClick","onDragOver","onDrop","draggable","onDragStart","onDragEnd","ref","_c","$RefreshReg$"],"sources":["/Users/shah/Desktop/chessGame/frontend/src/components/ChessBoard.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport './ChessBoard.css';\nimport bb from '../public/images/bb.svg';\nimport bw from '../public/images/bw.svg';\nimport kb from '../public/images/kb.svg';\nimport kw from '../public/images/kw.svg';\nimport nb from '../public/images/nb.svg';\nimport nw from '../public/images/nw.svg';\nimport pb from '../public/images/pb.svg';\nimport pw from '../public/images/pw.svg';\nimport qb from '../public/images/qb.svg';\nimport qw from '../public/images/qw.svg';\nimport rb from '../public/images/rb.svg';\nimport rw from '../public/images/rw.svg';\n\nconst pieceImages = {\n  'P': pw,\n  'R': rw,\n  'N': nw,\n  'B': bw,\n  'Q': qw,\n  'K': kw,\n  'p': pb,\n  'r': rb,\n  'n': nb,\n  'b': bb,\n  'q': qb,\n  'k': kb,\n};\n\nconst initialBoard = [\n  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],\n  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\n  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']\n];\n\nconst ChessBoard = () => {\n  const [board, setBoard] = useState(initialBoard);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [highlightedMoves, setHighlightedMoves] = useState([]);\n  const [turn, setTurn] = useState('white');\n  const [winner, setWinner] = useState(null);\n  const [whiteTaken, setWhiteTaken] = useState([]);\n  const [blackTaken, setBlackTaken] = useState([]);\n  const [enPassant, setEnPassant] = useState(null);\n  const dragImageRef = useRef(null);\n\n  const pieceRefs = useRef(board.map(row => row.map(() => React.createRef())));\n\n  const getPossibleMoves = (piece, row, col) => {\n    // ... (same as your original getPossibleMoves function)\n  };\n\n  const handleSquareClick = (row, col) => {\n    if (winner) return;\n    if (selectedPiece) {\n      const validMove = highlightedMoves.some(move => move.row === row && move.col === col);\n      if (validMove) {\n        const newBoard = board.map(arr => arr.slice());\n        const { piece, startRow, startCol } = selectedPiece;\n\n        // Handle en passant\n        if (piece.toLowerCase() === 'p' && col !== startCol && !board[row][col]) {\n          if (turn === 'white') {\n            newBoard[row + 1][col] = '';\n            setBlackTaken([...blackTaken, 'p']);\n          } else {\n            newBoard[row - 1][col] = '';\n            setWhiteTaken([...whiteTaken, 'P']);\n          }\n        }\n\n        if (newBoard[row][col]) {\n          if (turn === 'white') {\n            setWhiteTaken([...whiteTaken, newBoard[row][col]]);\n          } else {\n            setBlackTaken([...blackTaken, newBoard[row][col]]);\n          }\n        }\n\n        newBoard[startRow][startCol] = '';\n        newBoard[row][col] = piece;\n\n        if (piece.toLowerCase() === 'p' && Math.abs(startRow - row) === 2) {\n          setEnPassant({ row: (startRow + row) / 2, col });\n        } else {\n          setEnPassant(null);\n        }\n\n        setBoard(newBoard);\n\n        const opponent = turn === 'white' ? 'black' : 'white';\n        if (isCheckmate(opponent, newBoard)) {\n          setWinner(turn);\n        } else {\n          setTurn(turn === 'white' ? 'black' : 'white');\n        }\n      }\n      setSelectedPiece(null);\n      setHighlightedMoves([]);\n    } else if (board[row][col] && ((turn === 'white' && board[row][col].toUpperCase() === board[row][col]) || (turn === 'black' && board[row][col].toLowerCase() === board[row][col]))) {\n      setSelectedPiece({ piece: board[row][col], startRow: row, startCol: col });\n      setHighlightedMoves(getPossibleMoves(board[row][col], row, col));\n    }\n  };\n\n  const handleDragStart = (e, piece, row, col) => {\n    if ((turn === 'white' && piece.toUpperCase() === piece) || (turn === 'black' && piece.toLowerCase() === piece)) {\n      setSelectedPiece({ piece, startRow: row, startCol: col });\n      setHighlightedMoves(getPossibleMoves(piece, row, col));\n\n      e.dataTransfer.effectAllowed = \"move\";\n      const img = e.target.cloneNode(true);\n      img.style.position = \"absolute\";\n      img.style.opacity = \"1\";\n      img.style.pointerEvents = \"none\";\n      img.style.zIndex = \"1000\";\n      document.body.appendChild(img);\n      dragImageRef.current = img;\n      e.dataTransfer.setDragImage(img, img.clientWidth / 2, img.clientHeight / 2);\n    } else {\n      e.preventDefault();\n    }\n  };\n\n  const handleDragEnd = () => {\n    if (dragImageRef.current) {\n      document.body.removeChild(dragImageRef.current);\n      dragImageRef.current = null;\n    }\n  };\n\n  const handleDragOver = (e, row, col) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = \"move\";\n  };\n\n  const handleDrop = (e, row, col) => {\n    e.preventDefault();\n    handleSquareClick(row, col);\n  };\n\n  const isCheckmate = (color, boardState) => {\n    const kingPosition = findKing(boardState, color === 'white' ? 'K' : 'k');\n    if (!kingPosition) return false;\n\n    const moves = getAllPossibleMoves(color, boardState);\n    return moves.length === 0 && isSquareAttacked(boardState, kingPosition.row, kingPosition.col, color === 'white' ? 'black' : 'white');\n  };\n\n  const getAllPossibleMoves = (color, boardState) => {\n    const moves = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = boardState[row][col];\n        if (piece && ((color === 'white' && piece.toUpperCase() === piece) || (color === 'black' && piece.toLowerCase() === piece))) {\n          moves.push(...getPossibleMoves(piece, row, col, boardState));\n        }\n      }\n    }\n    return moves;\n  };\n\n  return (\n    <div className=\"game-container\">\n      <h2>{turn === 'white' ? 'White' : 'Black'}'s Turn</h2>\n      {winner && <h3>{winner} wins by checkmate!</h3>}\n      <div className=\"taken-pieces\">\n        <div className=\"white-taken\">\n          <h3>White's Taken Pieces</h3>\n          <div>{whiteTaken.map((piece, index) => <span key={index}><img src={pieceImages[piece]} alt={piece} className=\"small-piece\" /></span>)}</div>\n        </div>\n        <div className=\"black-taken\">\n          <h3>Black's Taken Pieces</h3>\n          <div>{blackTaken.map((piece, index) => <span key={index}><img src={pieceImages[piece]} alt={piece} className=\"small-piece\" /></span>)}</div>\n        </div>\n      </div>\n      <div className=\"chessboard\">\n        {board.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"row\">\n            {row.map((piece, colIndex) => {\n              const isHighlighted = highlightedMoves.some(move => move.row === rowIndex && move.col === colIndex);\n              return (\n                <div\n                  key={colIndex}\n                  className={`square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'} ${isHighlighted ? 'highlighted' : ''}`}\n                  onClick={() => handleSquareClick(rowIndex, colIndex)}\n                  onDragOver={(e) => handleDragOver(e, rowIndex, colIndex)}\n                  onDrop={(e) => handleDrop(e, rowIndex, colIndex)}\n                >\n                  {piece && (\n                    <img\n                      src={pieceImages[piece]}\n                      alt={piece}\n                      className=\"piece\"\n                      draggable\n                      onDragStart={(e) => handleDragStart(e, piece, rowIndex, colIndex)}\n                      onDragEnd={handleDragEnd}\n                      ref={pieceRefs.current[rowIndex][colIndex]}\n                    />\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ChessBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}