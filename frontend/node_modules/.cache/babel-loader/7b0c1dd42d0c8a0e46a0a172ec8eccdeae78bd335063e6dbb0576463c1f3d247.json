{"ast":null,"code":"var _jsxFileName = \"/Users/shah/Desktop/chessGame/frontend/src/components/ChessBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './ChessBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialBoardSetup = [['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'], ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'], ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']];\nconst pieceImages = {\n  'P': '/images/pw.svg',\n  'R': '/images/rw.svg',\n  'N': '/images/nw.svg',\n  'B': '/images/bw.svg',\n  'Q': '/images/qw.svg',\n  'K': '/images/kw.svg',\n  'p': '/images/pb.svg',\n  'r': '/images/rb.svg',\n  'n': '/images/nb.svg',\n  'b': '/images/bb.svg',\n  'q': '/images/qb.svg',\n  'k': '/images/kb.svg'\n};\nconst ChessBoard = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoardSetup);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [turn, setTurn] = useState('white');\n  const [highlightedMoves, setHighlightedMoves] = useState([]);\n  const [enPassant, setEnPassant] = useState(null);\n  const [whiteTaken, setWhiteTaken] = useState([]);\n  const [blackTaken, setBlackTaken] = useState([]);\n  const [winner, setWinner] = useState(null);\n  const [kingMoved, setKingMoved] = useState({\n    white: false,\n    black: false\n  });\n  const [rookMoved, setRookMoved] = useState({\n    white: {\n      queenside: false,\n      kingside: false\n    },\n    black: {\n      queenside: false,\n      kingside: false\n    }\n  });\n  const isValidMove = (piece, startRow, startCol, endRow, endCol, boardState) => {\n    const dx = Math.abs(endCol - startCol);\n    const dy = endRow - startRow;\n    if (boardState[endRow][endCol] && (piece.toUpperCase() === piece && boardState[endRow][endCol].toUpperCase() === boardState[endRow][endCol] || piece.toLowerCase() === piece && boardState[endRow][endCol].toLowerCase() === boardState[endRow][endCol])) {\n      return false; // Cannot move to a square occupied by the same color piece\n    }\n    switch (piece.toLowerCase()) {\n      case 'p':\n        // Pawn\n        // Pawn specific moves omitted for brevity\n        return false;\n      case 'r':\n        // Rook\n        return (dx === 0 || dy === 0) && !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'n':\n        // Knight\n        return dx * dy === 2;\n      case 'b':\n        // Bishop\n        return dx === dy && !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'q':\n        // Queen\n        return (dx === 0 || dy === 0 || dx === dy) && !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'k':\n        // King\n        if (dx === 2 && dy === 0) {\n          // Castling move\n          const kingside = endCol > startCol;\n          const rookCol = kingside ? 7 : 0;\n          const rookTargetCol = kingside ? 5 : 3;\n          if (kingMoved[turn] || rookMoved[turn][kingside ? 'kingside' : 'queenside']) {\n            return false;\n          }\n          if (isPathBlocked(startRow, startCol, endRow, rookCol, boardState) || isSquareAttacked(boardState, startRow, startCol, turn) || isSquareAttacked(boardState, startRow, rookTargetCol, turn)) {\n            return false;\n          }\n          return true;\n        }\n        return dx <= 1 && dy <= 1;\n      default:\n        return false;\n    }\n  };\n  const isPathBlocked = (startRow, startCol, endRow, endCol, boardState) => {\n    const dx = endCol > startCol ? 1 : endCol < startCol ? -1 : 0;\n    const dy = endRow > startRow ? 1 : endRow < startRow ? -1 : 0;\n    let x = startCol + dx;\n    let y = startRow + dy;\n    while (x !== endCol || y !== endRow) {\n      if (boardState[y][x] !== '') return true;\n      x += dx;\n      y += dy;\n    }\n    return false;\n  };\n  const handleSquareClick = (row, col) => {\n    if (selectedPiece && !winner) {\n      const {\n        piece,\n        startRow,\n        startCol\n      } = selectedPiece;\n      if (isValidMove(piece, startRow, startCol, row, col, board)) {\n        const newBoard = board.map(r => r.slice());\n        newBoard[startRow][startCol] = ''; // Clear the start square\n\n        // Check for castling move\n        if (piece.toLowerCase() === 'k' && Math.abs(startCol - col) === 2) {\n          const kingside = col > startCol;\n          const rookStartCol = kingside ? 7 : 0;\n          const rookEndCol = kingside ? 5 : 3;\n          newBoard[startRow][rookEndCol] = newBoard[startRow][rookStartCol];\n          newBoard[startRow][rookStartCol] = '';\n        } else {\n          newBoard[row][col] = piece; // Move the piece normally\n        }\n        setBoard(newBoard);\n        setKingMoved({\n          ...kingMoved,\n          [turn]: true\n        });\n        if (Math.abs(startCol - col) === 2) {\n          setRookMoved({\n            ...rookMoved,\n            [turn]: {\n              ...rookMoved[turn],\n              [col > startCol ? 'kingside' : 'queenside']: true\n            }\n          });\n        }\n        setTurn(turn === 'white' ? 'black' : 'white');\n      }\n      setSelectedPiece(null);\n    } else if (board[row][col] && (turn === 'white' && board[row][col].toUpperCase() === board[row][col] || turn === 'black' && board[row][col].toLowerCase() === board[row][col])) {\n      setSelectedPiece({\n        piece: board[row][col],\n        startRow: row,\n        startCol: col\n      });\n    }\n  };\n\n  // Render logic and additional functions remain unchanged\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessboard\",\n      children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((piece, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'}`,\n          onClick: () => handleSquareClick(rowIndex, colIndex),\n          children: piece && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: pieceImages[piece],\n            alt: piece,\n            className: \"piece\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 27\n          }, this)\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"NWC4Jwp0nhubQY4zYWAtwH4tOiQ=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","initialBoardSetup","pieceImages","ChessBoard","_s","board","setBoard","selectedPiece","setSelectedPiece","turn","setTurn","highlightedMoves","setHighlightedMoves","enPassant","setEnPassant","whiteTaken","setWhiteTaken","blackTaken","setBlackTaken","winner","setWinner","kingMoved","setKingMoved","white","black","rookMoved","setRookMoved","queenside","kingside","isValidMove","piece","startRow","startCol","endRow","endCol","boardState","dx","Math","abs","dy","toUpperCase","toLowerCase","isPathBlocked","rookCol","rookTargetCol","isSquareAttacked","x","y","handleSquareClick","row","col","newBoard","map","r","slice","rookStartCol","rookEndCol","className","children","rowIndex","colIndex","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shah/Desktop/chessGame/frontend/src/components/ChessBoard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './ChessBoard.css';\n\nconst initialBoardSetup = [\n  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],\n  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\n  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']\n];\n\nconst pieceImages = {\n  'P': '/images/pw.svg', 'R': '/images/rw.svg', 'N': '/images/nw.svg', 'B': '/images/bw.svg', 'Q': '/images/qw.svg', 'K': '/images/kw.svg',\n  'p': '/images/pb.svg', 'r': '/images/rb.svg', 'n': '/images/nb.svg', 'b': '/images/bb.svg', 'q': '/images/qb.svg', 'k': '/images/kb.svg'\n};\n\nconst ChessBoard = () => {\n  const [board, setBoard] = useState(initialBoardSetup);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [turn, setTurn] = useState('white');\n  const [highlightedMoves, setHighlightedMoves] = useState([]);\n  const [enPassant, setEnPassant] = useState(null);\n  const [whiteTaken, setWhiteTaken] = useState([]);\n  const [blackTaken, setBlackTaken] = useState([]);\n  const [winner, setWinner] = useState(null);\n  const [kingMoved, setKingMoved] = useState({ white: false, black: false });\n  const [rookMoved, setRookMoved] = useState({ white: { queenside: false, kingside: false }, black: { queenside: false, kingside: false } });\n\n  const isValidMove = (piece, startRow, startCol, endRow, endCol, boardState) => {\n    const dx = Math.abs(endCol - startCol);\n    const dy = endRow - startRow;\n\n    if (boardState[endRow][endCol] && ((piece.toUpperCase() === piece && boardState[endRow][endCol].toUpperCase() === boardState[endRow][endCol]) || \n                                  (piece.toLowerCase() === piece && boardState[endRow][endCol].toLowerCase() === boardState[endRow][endCol]))) {\n      return false; // Cannot move to a square occupied by the same color piece\n    }\n\n    switch (piece.toLowerCase()) {\n      case 'p': // Pawn\n        // Pawn specific moves omitted for brevity\n        return false;\n      case 'r': // Rook\n        return (dx === 0 || dy === 0) && !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'n': // Knight\n        return dx * dy === 2;\n      case 'b': // Bishop\n        return dx === dy && !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'q': // Queen\n        return (dx === 0 || dy === 0 || dx === dy) && !isPathBlocked(startRow, startCol, endRow, endCol, boardState);\n      case 'k': // King\n        if (dx === 2 && dy === 0) { // Castling move\n          const kingside = endCol > startCol;\n          const rookCol = kingside ? 7 : 0;\n          const rookTargetCol = kingside ? 5 : 3;\n\n          if (kingMoved[turn] || rookMoved[turn][kingside ? 'kingside' : 'queenside']) {\n            return false;\n          }\n\n          if (isPathBlocked(startRow, startCol, endRow, rookCol, boardState) || isSquareAttacked(boardState, startRow, startCol, turn) || isSquareAttacked(boardState, startRow, rookTargetCol, turn)) {\n            return false;\n          }\n          return true;\n        }\n        return dx <= 1 && dy <= 1;\n      default:\n        return false;\n    }\n  };\n\n  const isPathBlocked = (startRow, startCol, endRow, endCol, boardState) => {\n    const dx = endCol > startCol ? 1 : endCol < startCol ? -1 : 0;\n    const dy = endRow > startRow ? 1 : endRow < startRow ? -1 : 0;\n    let x = startCol + dx;\n    let y = startRow + dy;\n\n    while (x !== endCol || y !== endRow) {\n      if (boardState[y][x] !== '') return true;\n      x += dx;\n      y += dy;\n    }\n\n    return false;\n  };\n\n  const handleSquareClick = (row, col) => {\n    if (selectedPiece && !winner) {\n      const { piece, startRow, startCol } = selectedPiece;\n      if (isValidMove(piece, startRow, startCol, row, col, board)) {\n        const newBoard = board.map((r) => r.slice());\n        newBoard[startRow][startCol] = ''; // Clear the start square\n\n        // Check for castling move\n        if (piece.toLowerCase() === 'k' && Math.abs(startCol - col) === 2) {\n          const kingside = col > startCol;\n          const rookStartCol = kingside ? 7 : 0;\n          const rookEndCol = kingside ? 5 : 3;\n          newBoard[startRow][rookEndCol] = newBoard[startRow][rookStartCol];\n          newBoard[startRow][rookStartCol] = '';\n        } else {\n          newBoard[row][col] = piece; // Move the piece normally\n        }\n\n        setBoard(newBoard);\n        setKingMoved({ ...kingMoved, [turn]: true });\n        if (Math.abs(startCol - col) === 2) {\n          setRookMoved({\n            ...rookMoved,\n            [turn]: {\n              ...rookMoved[turn],\n              [col > startCol ? 'kingside' : 'queenside']: true\n            }\n          });\n        }\n        setTurn(turn === 'white' ? 'black' : 'white');\n      }\n      setSelectedPiece(null);\n    } else if (board[row][col] && ((turn === 'white' && board[row][col].toUpperCase() === board[row][col]) || (turn === 'black' && board[row][col].toLowerCase() === board[row][col]))) {\n      setSelectedPiece({ piece: board[row][col], startRow: row, startCol: col });\n    }\n  };\n\n  // Render logic and additional functions remain unchanged\n  return (\n    <div className=\"game-container\">\n      {/* Additional UI components */}\n      <div className=\"chessboard\">\n        {board.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"row\">\n            {row.map((piece, colIndex) => (\n              <div\n                key={colIndex}\n                className={`square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'}`}\n                onClick={() => handleSquareClick(rowIndex, colIndex)}\n              >\n                {piece && <img src={pieceImages[piece]} alt={piece} className=\"piece\" />}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ChessBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}